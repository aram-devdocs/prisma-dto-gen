// Auto-generated by prisma-dto-gen (refactored inline)

type Decimal = { valueOf(): string };

export interface QueryOutput {
  findFirstChangeLog?: {
    change_log_id: string;
    applied_at: Date;
    description: string;
  } | null;
  findFirstChangeLogOrThrow?: any /* circular reference to ChangeLog */ | null;
  findManyChangeLog: any /* circular reference to ChangeLog */;
  aggregateChangeLog: any;
  groupByChangeLog: any;
  findUniqueChangeLog?: any /* circular reference to ChangeLog */ | null;
  findUniqueChangeLogOrThrow?: any /* circular reference to ChangeLog */ | null;
  findFirstUserProfile?: {
    profile_id: string;
    created_timestamp: Date;
    updated_timestamp?: Date | null;
    deactivated?: boolean | null;
    full_name: string;
    email_address?: string | null;
    phone_number?: string | null;
    password_hash?: string | null;
    account_level?: "BASIC" | "PREMIUM" | "ADMIN" | null;
    user_documents: {
      document_id: string;
      owner_profile_id: string;
      title: string;
      content: string;
      status: "DRAFT" | "REVIEW" | "PUBLISHED" | "ARCHIVED";
      created_at: Date;
      updated_at?: Date | null;
      archived?: boolean | null;
      user_profile: any /* circular reference to UserProfile */;
      comments: {
        comment_id: string;
        document_id: string;
        commenter_id: string;
        text: string;
        created_at: Date;
        edited_at?: Date | null;
        is_deleted?: boolean | null;
        user_document: any /* circular reference to UserDocument */;
        user_profile: any /* circular reference to UserProfile */;
      }[];
    }[];
    user_notifications: {
      notification_id: string;
      recipient_profile_id: string;
      sent_timestamp: Date;
      read_timestamp?: Date | null;
      message: string;
      notification_refs: {
        notification_reference_id: string;
        notification_id: string;
        referenced_entity_id: string;
        status: "DRAFT" | "REVIEW" | "PUBLISHED" | "ARCHIVED";
        archived?: boolean | null;
        notification: any /* circular reference to UserNotification */;
      }[];
      user_profile: any /* circular reference to UserProfile */;
    }[];
    user_accounts: {
      account_id: string;
      owner_profile_id: string;
      name: string;
      created_at: Date;
      modified_at?: Date | null;
      is_active: boolean;
      user_profile: any /* circular reference to UserProfile */;
    }[];
    user_two_step_codes: {
      verification_id: string;
      profile_id: string;
      code?: string | null;
      is_verified: boolean;
      created_at: Date;
      verification_type: "EMAIL" | "SMS" | "PUSH";
      user_profile: any /* circular reference to UserProfile */;
    }[];
    user_comments: any /* circular reference to UserComment */[];
    created_by_profile?: any /* circular reference to UserProfile */ | null;
    created_by_id?: string | null;
    profiles_created: any /* circular reference to UserProfile */[];
    threads_as_primary_participant: {
      thread_id: string;
      primary_participant: string;
      secondary_participant?: string | null;
      created_on: Date;
      closed_on?: Date | null;
      is_flagged?: boolean | null;
      flagged_reason?: string | null;
      participant_one: any /* circular reference to UserProfile */;
      participant_two?: any /* circular reference to UserProfile */ | null;
      messages: {
        message_id: string;
        thread_id: string;
        sender_id: string;
        content: string;
        sent_at: Date;
        updated_at?: Date | null;
        is_archived?: boolean | null;
        discussion_thread: any /* circular reference to DiscussionThread */;
        sender: any /* circular reference to UserProfile */;
      }[];
    }[];
    threads_as_secondary_participant: any /* circular reference to DiscussionThread */[];
    sent_messages: any /* circular reference to ThreadMessage */[];
    org_memberships: {
      membership_id: string;
      organization_id: string;
      profile_id: string;
      joined_on: Date;
      is_active?: boolean | null;
      organization: {
        organization_id: string;
        name: string;
        description?: string | null;
        created_on: Date;
        updated_on?: Date | null;
        is_active?: boolean | null;
        events: {
          org_event_id: string;
          organization_id: string;
          event_name: string;
          start_time: Date;
          end_time?: Date | null;
          location?: string | null;
          organization: any /* circular reference to Organization */;
        }[];
        members: any /* circular reference to OrgMembership */[];
        records: {
          record_id: string;
          organization_id: string;
          title: string;
          details?: string | null;
          created_on: Date;
          updated_on?: Date | null;
          organization: any /* circular reference to Organization */;
        }[];
      };
      user_profile: any /* circular reference to UserProfile */;
    }[];
    payments: {
      payment_id: string;
      payer_id: string;
      amount: Decimal;
      paid_at: Date;
      status: "DRAFT" | "REVIEW" | "PUBLISHED" | "ARCHIVED";
      reference_note?: string | null;
      payer: any /* circular reference to UserProfile */;
    }[];
  } | null;
  findFirstUserProfileOrThrow?: any /* circular reference to UserProfile */ | null;
  findManyUserProfile: any /* circular reference to UserProfile */;
  aggregateUserProfile: any;
  groupByUserProfile: any;
  findUniqueUserProfile?: any /* circular reference to UserProfile */ | null;
  findUniqueUserProfileOrThrow?: any /* circular reference to UserProfile */ | null;
  findFirstUserAccount?: any /* circular reference to UserAccount */ | null;
  findFirstUserAccountOrThrow?: any /* circular reference to UserAccount */ | null;
  findManyUserAccount: any /* circular reference to UserAccount */;
  aggregateUserAccount: any;
  groupByUserAccount: any;
  findUniqueUserAccount?: any /* circular reference to UserAccount */ | null;
  findUniqueUserAccountOrThrow?: any /* circular reference to UserAccount */ | null;
  findFirstUserNotification?: any /* circular reference to UserNotification */ | null;
  findFirstUserNotificationOrThrow?: any /* circular reference to UserNotification */ | null;
  findManyUserNotification: any /* circular reference to UserNotification */;
  aggregateUserNotification: any;
  groupByUserNotification: any;
  findUniqueUserNotification?: any /* circular reference to UserNotification */ | null;
  findUniqueUserNotificationOrThrow?: any /* circular reference to UserNotification */ | null;
  findFirstNotificationReference?: any /* circular reference to NotificationReference */ | null;
  findFirstNotificationReferenceOrThrow?:
    | any /* circular reference to NotificationReference */
    | null;
  findManyNotificationReference: any /* circular reference to NotificationReference */;
  aggregateNotificationReference: any;
  groupByNotificationReference: any;
  findUniqueNotificationReference?: any /* circular reference to NotificationReference */ | null;
  findUniqueNotificationReferenceOrThrow?:
    | any /* circular reference to NotificationReference */
    | null;
  findFirstUserDocument?: any /* circular reference to UserDocument */ | null;
  findFirstUserDocumentOrThrow?: any /* circular reference to UserDocument */ | null;
  findManyUserDocument: any /* circular reference to UserDocument */;
  aggregateUserDocument: any;
  groupByUserDocument: any;
  findUniqueUserDocument?: any /* circular reference to UserDocument */ | null;
  findUniqueUserDocumentOrThrow?: any /* circular reference to UserDocument */ | null;
  findFirstUserComment?: any /* circular reference to UserComment */ | null;
  findFirstUserCommentOrThrow?: any /* circular reference to UserComment */ | null;
  findManyUserComment: any /* circular reference to UserComment */;
  aggregateUserComment: any;
  groupByUserComment: any;
  findUniqueUserComment?: any /* circular reference to UserComment */ | null;
  findUniqueUserCommentOrThrow?: any /* circular reference to UserComment */ | null;
  findFirstDiscussionThread?: any /* circular reference to DiscussionThread */ | null;
  findFirstDiscussionThreadOrThrow?: any /* circular reference to DiscussionThread */ | null;
  findManyDiscussionThread: any /* circular reference to DiscussionThread */;
  aggregateDiscussionThread: any;
  groupByDiscussionThread: any;
  findUniqueDiscussionThread?: any /* circular reference to DiscussionThread */ | null;
  findUniqueDiscussionThreadOrThrow?: any /* circular reference to DiscussionThread */ | null;
  findFirstThreadMessage?: any /* circular reference to ThreadMessage */ | null;
  findFirstThreadMessageOrThrow?: any /* circular reference to ThreadMessage */ | null;
  findManyThreadMessage: any /* circular reference to ThreadMessage */;
  aggregateThreadMessage: any;
  groupByThreadMessage: any;
  findUniqueThreadMessage?: any /* circular reference to ThreadMessage */ | null;
  findUniqueThreadMessageOrThrow?: any /* circular reference to ThreadMessage */ | null;
  findFirstTwoStepVerification?: any /* circular reference to TwoStepVerification */ | null;
  findFirstTwoStepVerificationOrThrow?: any /* circular reference to TwoStepVerification */ | null;
  findManyTwoStepVerification: any /* circular reference to TwoStepVerification */;
  aggregateTwoStepVerification: any;
  groupByTwoStepVerification: any;
  findUniqueTwoStepVerification?: any /* circular reference to TwoStepVerification */ | null;
  findUniqueTwoStepVerificationOrThrow?: any /* circular reference to TwoStepVerification */ | null;
  findFirstOrganization?: any /* circular reference to Organization */ | null;
  findFirstOrganizationOrThrow?: any /* circular reference to Organization */ | null;
  findManyOrganization: any /* circular reference to Organization */;
  aggregateOrganization: any;
  groupByOrganization: any;
  findUniqueOrganization?: any /* circular reference to Organization */ | null;
  findUniqueOrganizationOrThrow?: any /* circular reference to Organization */ | null;
  findFirstOrgEvent?: any /* circular reference to OrgEvent */ | null;
  findFirstOrgEventOrThrow?: any /* circular reference to OrgEvent */ | null;
  findManyOrgEvent: any /* circular reference to OrgEvent */;
  aggregateOrgEvent: any;
  groupByOrgEvent: any;
  findUniqueOrgEvent?: any /* circular reference to OrgEvent */ | null;
  findUniqueOrgEventOrThrow?: any /* circular reference to OrgEvent */ | null;
  findFirstOrgMembership?: any /* circular reference to OrgMembership */ | null;
  findFirstOrgMembershipOrThrow?: any /* circular reference to OrgMembership */ | null;
  findManyOrgMembership: any /* circular reference to OrgMembership */;
  aggregateOrgMembership: any;
  groupByOrgMembership: any;
  findUniqueOrgMembership?: any /* circular reference to OrgMembership */ | null;
  findUniqueOrgMembershipOrThrow?: any /* circular reference to OrgMembership */ | null;
  findFirstOrgRecord?: any /* circular reference to OrgRecord */ | null;
  findFirstOrgRecordOrThrow?: any /* circular reference to OrgRecord */ | null;
  findManyOrgRecord: any /* circular reference to OrgRecord */;
  aggregateOrgRecord: any;
  groupByOrgRecord: any;
  findUniqueOrgRecord?: any /* circular reference to OrgRecord */ | null;
  findUniqueOrgRecordOrThrow?: any /* circular reference to OrgRecord */ | null;
  findFirstPayment?: any /* circular reference to Payment */ | null;
  findFirstPaymentOrThrow?: any /* circular reference to Payment */ | null;
  findManyPayment: any /* circular reference to Payment */;
  aggregatePayment: any;
  groupByPayment: any;
  findUniquePayment?: any /* circular reference to Payment */ | null;
  findUniquePaymentOrThrow?: any /* circular reference to Payment */ | null;
}

import { z } from "zod";

export const QueryOutputSchema = z.object({
  findFirstChangeLog: z
    .object({
      change_log_id: z.string(),
      applied_at: z.date(),
      description: z.string(),
    })
    .nullable(),
  findFirstChangeLogOrThrow: z
    .object({
      change_log_id: z.string(),
      applied_at: z.date(),
      description: z.string(),
    })
    .nullable(),
  findManyChangeLog: z.array(
    z.object({
      change_log_id: z.string(),
      applied_at: z.date(),
      description: z.string(),
    }),
  ),
  aggregateChangeLog: z.any(),
  groupByChangeLog: z.array(z.any()),
  findUniqueChangeLog: z
    .object({
      change_log_id: z.string(),
      applied_at: z.date(),
      description: z.string(),
    })
    .nullable(),
  findUniqueChangeLogOrThrow: z
    .object({
      change_log_id: z.string(),
      applied_at: z.date(),
      description: z.string(),
    })
    .nullable(),
  findFirstUserProfile: z
    .object({
      profile_id: z.string(),
      created_timestamp: z.date(),
      updated_timestamp: z.date().nullable(),
      deactivated: z.boolean().nullable(),
      full_name: z.string(),
      email_address: z.string().nullable(),
      phone_number: z.string().nullable(),
      password_hash: z.string().nullable(),
      account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
      user_documents: z.array(
        z.object({
          document_id: z.string(),
          owner_profile_id: z.string(),
          title: z.string(),
          content: z.string(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          created_at: z.date(),
          updated_at: z.date().nullable(),
          archived: z.boolean().nullable(),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
          comments: z.array(
            z.object({
              comment_id: z.string(),
              document_id: z.string(),
              commenter_id: z.string(),
              text: z.string(),
              created_at: z.date(),
              edited_at: z.date().nullable(),
              is_deleted: z.boolean().nullable(),
              user_document: z.any() /* circular reference to UserDocumentSchema */,
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      ),
      user_notifications: z.array(
        z.object({
          notification_id: z.string(),
          recipient_profile_id: z.string(),
          sent_timestamp: z.date(),
          read_timestamp: z.date().nullable(),
          message: z.string(),
          notification_refs: z.array(
            z.object({
              notification_reference_id: z.string(),
              notification_id: z.string(),
              referenced_entity_id: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              archived: z.boolean().nullable(),
              notification: z.any() /* circular reference to UserNotificationSchema */,
            }),
          ),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_accounts: z.array(
        z.object({
          account_id: z.string(),
          owner_profile_id: z.string(),
          name: z.string(),
          created_at: z.date(),
          modified_at: z.date().nullable(),
          is_active: z.boolean(),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_two_step_codes: z.array(
        z.object({
          verification_id: z.string(),
          profile_id: z.string(),
          code: z.string().nullable(),
          is_verified: z.boolean(),
          created_at: z.date(),
          verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
      created_by_profile: z
        .any() /* circular reference to UserProfileSchema */
        .nullable(),
      created_by_id: z.string().nullable(),
      profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
      threads_as_primary_participant: z.array(
        z.object({
          thread_id: z.string(),
          primary_participant: z.string(),
          secondary_participant: z.string().nullable(),
          created_on: z.date(),
          closed_on: z.date().nullable(),
          is_flagged: z.boolean().nullable(),
          flagged_reason: z.string().nullable(),
          participant_one: z.any() /* circular reference to UserProfileSchema */,
          participant_two: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          messages: z.array(
            z.object({
              message_id: z.string(),
              thread_id: z.string(),
              sender_id: z.string(),
              content: z.string(),
              sent_at: z.date(),
              updated_at: z.date().nullable(),
              is_archived: z.boolean().nullable(),
              discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
              sender: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      ),
      threads_as_secondary_participant: z.array(
        z.any() /* circular reference to DiscussionThreadSchema */,
      ),
      sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
      org_memberships: z.array(
        z.object({
          membership_id: z.string(),
          organization_id: z.string(),
          profile_id: z.string(),
          joined_on: z.date(),
          is_active: z.boolean().nullable(),
          organization: z.object({
            organization_id: z.string(),
            name: z.string(),
            description: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            is_active: z.boolean().nullable(),
            events: z.array(
              z.object({
                org_event_id: z.string(),
                organization_id: z.string(),
                event_name: z.string(),
                start_time: z.date(),
                end_time: z.date().nullable(),
                location: z.string().nullable(),
                organization: z.any() /* circular reference to OrganizationSchema */,
              }),
            ),
            members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
            records: z.array(
              z.object({
                record_id: z.string(),
                organization_id: z.string(),
                title: z.string(),
                details: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                organization: z.any() /* circular reference to OrganizationSchema */,
              }),
            ),
          }),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      payments: z.array(
        z.object({
          payment_id: z.string(),
          payer_id: z.string(),
          amount: z.any(),
          paid_at: z.date(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          reference_note: z.string().nullable(),
          payer: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
    })
    .nullable(),
  findFirstUserProfileOrThrow: z
    .object({
      profile_id: z.string(),
      created_timestamp: z.date(),
      updated_timestamp: z.date().nullable(),
      deactivated: z.boolean().nullable(),
      full_name: z.string(),
      email_address: z.string().nullable(),
      phone_number: z.string().nullable(),
      password_hash: z.string().nullable(),
      account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
      user_documents: z.array(
        z.object({
          document_id: z.string(),
          owner_profile_id: z.string(),
          title: z.string(),
          content: z.string(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          created_at: z.date(),
          updated_at: z.date().nullable(),
          archived: z.boolean().nullable(),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
          comments: z.array(
            z.object({
              comment_id: z.string(),
              document_id: z.string(),
              commenter_id: z.string(),
              text: z.string(),
              created_at: z.date(),
              edited_at: z.date().nullable(),
              is_deleted: z.boolean().nullable(),
              user_document: z.any() /* circular reference to UserDocumentSchema */,
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      ),
      user_notifications: z.array(
        z.object({
          notification_id: z.string(),
          recipient_profile_id: z.string(),
          sent_timestamp: z.date(),
          read_timestamp: z.date().nullable(),
          message: z.string(),
          notification_refs: z.array(
            z.object({
              notification_reference_id: z.string(),
              notification_id: z.string(),
              referenced_entity_id: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              archived: z.boolean().nullable(),
              notification: z.any() /* circular reference to UserNotificationSchema */,
            }),
          ),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_accounts: z.array(
        z.object({
          account_id: z.string(),
          owner_profile_id: z.string(),
          name: z.string(),
          created_at: z.date(),
          modified_at: z.date().nullable(),
          is_active: z.boolean(),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_two_step_codes: z.array(
        z.object({
          verification_id: z.string(),
          profile_id: z.string(),
          code: z.string().nullable(),
          is_verified: z.boolean(),
          created_at: z.date(),
          verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
      created_by_profile: z
        .any() /* circular reference to UserProfileSchema */
        .nullable(),
      created_by_id: z.string().nullable(),
      profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
      threads_as_primary_participant: z.array(
        z.object({
          thread_id: z.string(),
          primary_participant: z.string(),
          secondary_participant: z.string().nullable(),
          created_on: z.date(),
          closed_on: z.date().nullable(),
          is_flagged: z.boolean().nullable(),
          flagged_reason: z.string().nullable(),
          participant_one: z.any() /* circular reference to UserProfileSchema */,
          participant_two: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          messages: z.array(
            z.object({
              message_id: z.string(),
              thread_id: z.string(),
              sender_id: z.string(),
              content: z.string(),
              sent_at: z.date(),
              updated_at: z.date().nullable(),
              is_archived: z.boolean().nullable(),
              discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
              sender: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      ),
      threads_as_secondary_participant: z.array(
        z.any() /* circular reference to DiscussionThreadSchema */,
      ),
      sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
      org_memberships: z.array(
        z.object({
          membership_id: z.string(),
          organization_id: z.string(),
          profile_id: z.string(),
          joined_on: z.date(),
          is_active: z.boolean().nullable(),
          organization: z.object({
            organization_id: z.string(),
            name: z.string(),
            description: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            is_active: z.boolean().nullable(),
            events: z.array(
              z.object({
                org_event_id: z.string(),
                organization_id: z.string(),
                event_name: z.string(),
                start_time: z.date(),
                end_time: z.date().nullable(),
                location: z.string().nullable(),
                organization: z.any() /* circular reference to OrganizationSchema */,
              }),
            ),
            members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
            records: z.array(
              z.object({
                record_id: z.string(),
                organization_id: z.string(),
                title: z.string(),
                details: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                organization: z.any() /* circular reference to OrganizationSchema */,
              }),
            ),
          }),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      payments: z.array(
        z.object({
          payment_id: z.string(),
          payer_id: z.string(),
          amount: z.any(),
          paid_at: z.date(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          reference_note: z.string().nullable(),
          payer: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
    })
    .nullable(),
  findManyUserProfile: z.array(
    z.object({
      profile_id: z.string(),
      created_timestamp: z.date(),
      updated_timestamp: z.date().nullable(),
      deactivated: z.boolean().nullable(),
      full_name: z.string(),
      email_address: z.string().nullable(),
      phone_number: z.string().nullable(),
      password_hash: z.string().nullable(),
      account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
      user_documents: z.array(
        z.object({
          document_id: z.string(),
          owner_profile_id: z.string(),
          title: z.string(),
          content: z.string(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          created_at: z.date(),
          updated_at: z.date().nullable(),
          archived: z.boolean().nullable(),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
          comments: z.array(
            z.object({
              comment_id: z.string(),
              document_id: z.string(),
              commenter_id: z.string(),
              text: z.string(),
              created_at: z.date(),
              edited_at: z.date().nullable(),
              is_deleted: z.boolean().nullable(),
              user_document: z.any() /* circular reference to UserDocumentSchema */,
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      ),
      user_notifications: z.array(
        z.object({
          notification_id: z.string(),
          recipient_profile_id: z.string(),
          sent_timestamp: z.date(),
          read_timestamp: z.date().nullable(),
          message: z.string(),
          notification_refs: z.array(
            z.object({
              notification_reference_id: z.string(),
              notification_id: z.string(),
              referenced_entity_id: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              archived: z.boolean().nullable(),
              notification: z.any() /* circular reference to UserNotificationSchema */,
            }),
          ),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_accounts: z.array(
        z.object({
          account_id: z.string(),
          owner_profile_id: z.string(),
          name: z.string(),
          created_at: z.date(),
          modified_at: z.date().nullable(),
          is_active: z.boolean(),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_two_step_codes: z.array(
        z.object({
          verification_id: z.string(),
          profile_id: z.string(),
          code: z.string().nullable(),
          is_verified: z.boolean(),
          created_at: z.date(),
          verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
      created_by_profile: z
        .any() /* circular reference to UserProfileSchema */
        .nullable(),
      created_by_id: z.string().nullable(),
      profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
      threads_as_primary_participant: z.array(
        z.object({
          thread_id: z.string(),
          primary_participant: z.string(),
          secondary_participant: z.string().nullable(),
          created_on: z.date(),
          closed_on: z.date().nullable(),
          is_flagged: z.boolean().nullable(),
          flagged_reason: z.string().nullable(),
          participant_one: z.any() /* circular reference to UserProfileSchema */,
          participant_two: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          messages: z.array(
            z.object({
              message_id: z.string(),
              thread_id: z.string(),
              sender_id: z.string(),
              content: z.string(),
              sent_at: z.date(),
              updated_at: z.date().nullable(),
              is_archived: z.boolean().nullable(),
              discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
              sender: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      ),
      threads_as_secondary_participant: z.array(
        z.any() /* circular reference to DiscussionThreadSchema */,
      ),
      sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
      org_memberships: z.array(
        z.object({
          membership_id: z.string(),
          organization_id: z.string(),
          profile_id: z.string(),
          joined_on: z.date(),
          is_active: z.boolean().nullable(),
          organization: z.object({
            organization_id: z.string(),
            name: z.string(),
            description: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            is_active: z.boolean().nullable(),
            events: z.array(
              z.object({
                org_event_id: z.string(),
                organization_id: z.string(),
                event_name: z.string(),
                start_time: z.date(),
                end_time: z.date().nullable(),
                location: z.string().nullable(),
                organization: z.any() /* circular reference to OrganizationSchema */,
              }),
            ),
            members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
            records: z.array(
              z.object({
                record_id: z.string(),
                organization_id: z.string(),
                title: z.string(),
                details: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                organization: z.any() /* circular reference to OrganizationSchema */,
              }),
            ),
          }),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      payments: z.array(
        z.object({
          payment_id: z.string(),
          payer_id: z.string(),
          amount: z.any(),
          paid_at: z.date(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          reference_note: z.string().nullable(),
          payer: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
    }),
  ),
  aggregateUserProfile: z.any(),
  groupByUserProfile: z.array(z.any()),
  findUniqueUserProfile: z
    .object({
      profile_id: z.string(),
      created_timestamp: z.date(),
      updated_timestamp: z.date().nullable(),
      deactivated: z.boolean().nullable(),
      full_name: z.string(),
      email_address: z.string().nullable(),
      phone_number: z.string().nullable(),
      password_hash: z.string().nullable(),
      account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
      user_documents: z.array(
        z.object({
          document_id: z.string(),
          owner_profile_id: z.string(),
          title: z.string(),
          content: z.string(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          created_at: z.date(),
          updated_at: z.date().nullable(),
          archived: z.boolean().nullable(),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
          comments: z.array(
            z.object({
              comment_id: z.string(),
              document_id: z.string(),
              commenter_id: z.string(),
              text: z.string(),
              created_at: z.date(),
              edited_at: z.date().nullable(),
              is_deleted: z.boolean().nullable(),
              user_document: z.any() /* circular reference to UserDocumentSchema */,
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      ),
      user_notifications: z.array(
        z.object({
          notification_id: z.string(),
          recipient_profile_id: z.string(),
          sent_timestamp: z.date(),
          read_timestamp: z.date().nullable(),
          message: z.string(),
          notification_refs: z.array(
            z.object({
              notification_reference_id: z.string(),
              notification_id: z.string(),
              referenced_entity_id: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              archived: z.boolean().nullable(),
              notification: z.any() /* circular reference to UserNotificationSchema */,
            }),
          ),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_accounts: z.array(
        z.object({
          account_id: z.string(),
          owner_profile_id: z.string(),
          name: z.string(),
          created_at: z.date(),
          modified_at: z.date().nullable(),
          is_active: z.boolean(),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_two_step_codes: z.array(
        z.object({
          verification_id: z.string(),
          profile_id: z.string(),
          code: z.string().nullable(),
          is_verified: z.boolean(),
          created_at: z.date(),
          verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
      created_by_profile: z
        .any() /* circular reference to UserProfileSchema */
        .nullable(),
      created_by_id: z.string().nullable(),
      profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
      threads_as_primary_participant: z.array(
        z.object({
          thread_id: z.string(),
          primary_participant: z.string(),
          secondary_participant: z.string().nullable(),
          created_on: z.date(),
          closed_on: z.date().nullable(),
          is_flagged: z.boolean().nullable(),
          flagged_reason: z.string().nullable(),
          participant_one: z.any() /* circular reference to UserProfileSchema */,
          participant_two: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          messages: z.array(
            z.object({
              message_id: z.string(),
              thread_id: z.string(),
              sender_id: z.string(),
              content: z.string(),
              sent_at: z.date(),
              updated_at: z.date().nullable(),
              is_archived: z.boolean().nullable(),
              discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
              sender: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      ),
      threads_as_secondary_participant: z.array(
        z.any() /* circular reference to DiscussionThreadSchema */,
      ),
      sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
      org_memberships: z.array(
        z.object({
          membership_id: z.string(),
          organization_id: z.string(),
          profile_id: z.string(),
          joined_on: z.date(),
          is_active: z.boolean().nullable(),
          organization: z.object({
            organization_id: z.string(),
            name: z.string(),
            description: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            is_active: z.boolean().nullable(),
            events: z.array(
              z.object({
                org_event_id: z.string(),
                organization_id: z.string(),
                event_name: z.string(),
                start_time: z.date(),
                end_time: z.date().nullable(),
                location: z.string().nullable(),
                organization: z.any() /* circular reference to OrganizationSchema */,
              }),
            ),
            members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
            records: z.array(
              z.object({
                record_id: z.string(),
                organization_id: z.string(),
                title: z.string(),
                details: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                organization: z.any() /* circular reference to OrganizationSchema */,
              }),
            ),
          }),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      payments: z.array(
        z.object({
          payment_id: z.string(),
          payer_id: z.string(),
          amount: z.any(),
          paid_at: z.date(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          reference_note: z.string().nullable(),
          payer: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
    })
    .nullable(),
  findUniqueUserProfileOrThrow: z
    .object({
      profile_id: z.string(),
      created_timestamp: z.date(),
      updated_timestamp: z.date().nullable(),
      deactivated: z.boolean().nullable(),
      full_name: z.string(),
      email_address: z.string().nullable(),
      phone_number: z.string().nullable(),
      password_hash: z.string().nullable(),
      account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
      user_documents: z.array(
        z.object({
          document_id: z.string(),
          owner_profile_id: z.string(),
          title: z.string(),
          content: z.string(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          created_at: z.date(),
          updated_at: z.date().nullable(),
          archived: z.boolean().nullable(),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
          comments: z.array(
            z.object({
              comment_id: z.string(),
              document_id: z.string(),
              commenter_id: z.string(),
              text: z.string(),
              created_at: z.date(),
              edited_at: z.date().nullable(),
              is_deleted: z.boolean().nullable(),
              user_document: z.any() /* circular reference to UserDocumentSchema */,
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      ),
      user_notifications: z.array(
        z.object({
          notification_id: z.string(),
          recipient_profile_id: z.string(),
          sent_timestamp: z.date(),
          read_timestamp: z.date().nullable(),
          message: z.string(),
          notification_refs: z.array(
            z.object({
              notification_reference_id: z.string(),
              notification_id: z.string(),
              referenced_entity_id: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              archived: z.boolean().nullable(),
              notification: z.any() /* circular reference to UserNotificationSchema */,
            }),
          ),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_accounts: z.array(
        z.object({
          account_id: z.string(),
          owner_profile_id: z.string(),
          name: z.string(),
          created_at: z.date(),
          modified_at: z.date().nullable(),
          is_active: z.boolean(),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_two_step_codes: z.array(
        z.object({
          verification_id: z.string(),
          profile_id: z.string(),
          code: z.string().nullable(),
          is_verified: z.boolean(),
          created_at: z.date(),
          verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
      created_by_profile: z
        .any() /* circular reference to UserProfileSchema */
        .nullable(),
      created_by_id: z.string().nullable(),
      profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
      threads_as_primary_participant: z.array(
        z.object({
          thread_id: z.string(),
          primary_participant: z.string(),
          secondary_participant: z.string().nullable(),
          created_on: z.date(),
          closed_on: z.date().nullable(),
          is_flagged: z.boolean().nullable(),
          flagged_reason: z.string().nullable(),
          participant_one: z.any() /* circular reference to UserProfileSchema */,
          participant_two: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          messages: z.array(
            z.object({
              message_id: z.string(),
              thread_id: z.string(),
              sender_id: z.string(),
              content: z.string(),
              sent_at: z.date(),
              updated_at: z.date().nullable(),
              is_archived: z.boolean().nullable(),
              discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
              sender: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      ),
      threads_as_secondary_participant: z.array(
        z.any() /* circular reference to DiscussionThreadSchema */,
      ),
      sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
      org_memberships: z.array(
        z.object({
          membership_id: z.string(),
          organization_id: z.string(),
          profile_id: z.string(),
          joined_on: z.date(),
          is_active: z.boolean().nullable(),
          organization: z.object({
            organization_id: z.string(),
            name: z.string(),
            description: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            is_active: z.boolean().nullable(),
            events: z.array(
              z.object({
                org_event_id: z.string(),
                organization_id: z.string(),
                event_name: z.string(),
                start_time: z.date(),
                end_time: z.date().nullable(),
                location: z.string().nullable(),
                organization: z.any() /* circular reference to OrganizationSchema */,
              }),
            ),
            members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
            records: z.array(
              z.object({
                record_id: z.string(),
                organization_id: z.string(),
                title: z.string(),
                details: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                organization: z.any() /* circular reference to OrganizationSchema */,
              }),
            ),
          }),
          user_profile: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
      payments: z.array(
        z.object({
          payment_id: z.string(),
          payer_id: z.string(),
          amount: z.any(),
          paid_at: z.date(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          reference_note: z.string().nullable(),
          payer: z.any() /* circular reference to UserProfileSchema */,
        }),
      ),
    })
    .nullable(),
  findFirstUserAccount: z
    .object({
      account_id: z.string(),
      owner_profile_id: z.string(),
      name: z.string(),
      created_at: z.date(),
      modified_at: z.date().nullable(),
      is_active: z.boolean(),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(z.any() /* circular reference to UserAccountSchema */),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findFirstUserAccountOrThrow: z
    .object({
      account_id: z.string(),
      owner_profile_id: z.string(),
      name: z.string(),
      created_at: z.date(),
      modified_at: z.date().nullable(),
      is_active: z.boolean(),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(z.any() /* circular reference to UserAccountSchema */),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findManyUserAccount: z.array(
    z.object({
      account_id: z.string(),
      owner_profile_id: z.string(),
      name: z.string(),
      created_at: z.date(),
      modified_at: z.date().nullable(),
      is_active: z.boolean(),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(z.any() /* circular reference to UserAccountSchema */),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    }),
  ),
  aggregateUserAccount: z.any(),
  groupByUserAccount: z.array(z.any()),
  findUniqueUserAccount: z
    .object({
      account_id: z.string(),
      owner_profile_id: z.string(),
      name: z.string(),
      created_at: z.date(),
      modified_at: z.date().nullable(),
      is_active: z.boolean(),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(z.any() /* circular reference to UserAccountSchema */),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findUniqueUserAccountOrThrow: z
    .object({
      account_id: z.string(),
      owner_profile_id: z.string(),
      name: z.string(),
      created_at: z.date(),
      modified_at: z.date().nullable(),
      is_active: z.boolean(),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(z.any() /* circular reference to UserAccountSchema */),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findFirstUserNotification: z
    .object({
      notification_id: z.string(),
      recipient_profile_id: z.string(),
      sent_timestamp: z.date(),
      read_timestamp: z.date().nullable(),
      message: z.string(),
      notification_refs: z.array(
        z.object({
          notification_reference_id: z.string(),
          notification_id: z.string(),
          referenced_entity_id: z.string(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          archived: z.boolean().nullable(),
          notification: z.any() /* circular reference to UserNotificationSchema */,
        }),
      ),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(z.any() /* circular reference to UserNotificationSchema */),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findFirstUserNotificationOrThrow: z
    .object({
      notification_id: z.string(),
      recipient_profile_id: z.string(),
      sent_timestamp: z.date(),
      read_timestamp: z.date().nullable(),
      message: z.string(),
      notification_refs: z.array(
        z.object({
          notification_reference_id: z.string(),
          notification_id: z.string(),
          referenced_entity_id: z.string(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          archived: z.boolean().nullable(),
          notification: z.any() /* circular reference to UserNotificationSchema */,
        }),
      ),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(z.any() /* circular reference to UserNotificationSchema */),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findManyUserNotification: z.array(
    z.object({
      notification_id: z.string(),
      recipient_profile_id: z.string(),
      sent_timestamp: z.date(),
      read_timestamp: z.date().nullable(),
      message: z.string(),
      notification_refs: z.array(
        z.object({
          notification_reference_id: z.string(),
          notification_id: z.string(),
          referenced_entity_id: z.string(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          archived: z.boolean().nullable(),
          notification: z.any() /* circular reference to UserNotificationSchema */,
        }),
      ),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(z.any() /* circular reference to UserNotificationSchema */),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    }),
  ),
  aggregateUserNotification: z.any(),
  groupByUserNotification: z.array(z.any()),
  findUniqueUserNotification: z
    .object({
      notification_id: z.string(),
      recipient_profile_id: z.string(),
      sent_timestamp: z.date(),
      read_timestamp: z.date().nullable(),
      message: z.string(),
      notification_refs: z.array(
        z.object({
          notification_reference_id: z.string(),
          notification_id: z.string(),
          referenced_entity_id: z.string(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          archived: z.boolean().nullable(),
          notification: z.any() /* circular reference to UserNotificationSchema */,
        }),
      ),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(z.any() /* circular reference to UserNotificationSchema */),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findUniqueUserNotificationOrThrow: z
    .object({
      notification_id: z.string(),
      recipient_profile_id: z.string(),
      sent_timestamp: z.date(),
      read_timestamp: z.date().nullable(),
      message: z.string(),
      notification_refs: z.array(
        z.object({
          notification_reference_id: z.string(),
          notification_id: z.string(),
          referenced_entity_id: z.string(),
          status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
          archived: z.boolean().nullable(),
          notification: z.any() /* circular reference to UserNotificationSchema */,
        }),
      ),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(z.any() /* circular reference to UserNotificationSchema */),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findFirstNotificationReference: z
    .object({
      notification_reference_id: z.string(),
      notification_id: z.string(),
      referenced_entity_id: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      archived: z.boolean().nullable(),
      notification: z.object({
        notification_id: z.string(),
        recipient_profile_id: z.string(),
        sent_timestamp: z.date(),
        read_timestamp: z.date().nullable(),
        message: z.string(),
        notification_refs: z.array(z.any() /* circular reference to NotificationReferenceSchema */),
        user_profile: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(
            z.object({
              document_id: z.string(),
              owner_profile_id: z.string(),
              title: z.string(),
              content: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              created_at: z.date(),
              updated_at: z.date().nullable(),
              archived: z.boolean().nullable(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
              comments: z.array(
                z.object({
                  comment_id: z.string(),
                  document_id: z.string(),
                  commenter_id: z.string(),
                  text: z.string(),
                  created_at: z.date(),
                  edited_at: z.date().nullable(),
                  is_deleted: z.boolean().nullable(),
                  user_document: z.any() /* circular reference to UserDocumentSchema */,
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          user_notifications: z.array(z.any() /* circular reference to UserNotificationSchema */),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.object({
              thread_id: z.string(),
              primary_participant: z.string(),
              secondary_participant: z.string().nullable(),
              created_on: z.date(),
              closed_on: z.date().nullable(),
              is_flagged: z.boolean().nullable(),
              flagged_reason: z.string().nullable(),
              participant_one: z.any() /* circular reference to UserProfileSchema */,
              participant_two: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              messages: z.array(
                z.object({
                  message_id: z.string(),
                  thread_id: z.string(),
                  sender_id: z.string(),
                  content: z.string(),
                  sent_at: z.date(),
                  updated_at: z.date().nullable(),
                  is_archived: z.boolean().nullable(),
                  discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                  sender: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      }),
    })
    .nullable(),
  findFirstNotificationReferenceOrThrow: z
    .object({
      notification_reference_id: z.string(),
      notification_id: z.string(),
      referenced_entity_id: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      archived: z.boolean().nullable(),
      notification: z.object({
        notification_id: z.string(),
        recipient_profile_id: z.string(),
        sent_timestamp: z.date(),
        read_timestamp: z.date().nullable(),
        message: z.string(),
        notification_refs: z.array(z.any() /* circular reference to NotificationReferenceSchema */),
        user_profile: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(
            z.object({
              document_id: z.string(),
              owner_profile_id: z.string(),
              title: z.string(),
              content: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              created_at: z.date(),
              updated_at: z.date().nullable(),
              archived: z.boolean().nullable(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
              comments: z.array(
                z.object({
                  comment_id: z.string(),
                  document_id: z.string(),
                  commenter_id: z.string(),
                  text: z.string(),
                  created_at: z.date(),
                  edited_at: z.date().nullable(),
                  is_deleted: z.boolean().nullable(),
                  user_document: z.any() /* circular reference to UserDocumentSchema */,
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          user_notifications: z.array(z.any() /* circular reference to UserNotificationSchema */),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.object({
              thread_id: z.string(),
              primary_participant: z.string(),
              secondary_participant: z.string().nullable(),
              created_on: z.date(),
              closed_on: z.date().nullable(),
              is_flagged: z.boolean().nullable(),
              flagged_reason: z.string().nullable(),
              participant_one: z.any() /* circular reference to UserProfileSchema */,
              participant_two: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              messages: z.array(
                z.object({
                  message_id: z.string(),
                  thread_id: z.string(),
                  sender_id: z.string(),
                  content: z.string(),
                  sent_at: z.date(),
                  updated_at: z.date().nullable(),
                  is_archived: z.boolean().nullable(),
                  discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                  sender: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      }),
    })
    .nullable(),
  findManyNotificationReference: z.array(
    z.object({
      notification_reference_id: z.string(),
      notification_id: z.string(),
      referenced_entity_id: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      archived: z.boolean().nullable(),
      notification: z.object({
        notification_id: z.string(),
        recipient_profile_id: z.string(),
        sent_timestamp: z.date(),
        read_timestamp: z.date().nullable(),
        message: z.string(),
        notification_refs: z.array(z.any() /* circular reference to NotificationReferenceSchema */),
        user_profile: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(
            z.object({
              document_id: z.string(),
              owner_profile_id: z.string(),
              title: z.string(),
              content: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              created_at: z.date(),
              updated_at: z.date().nullable(),
              archived: z.boolean().nullable(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
              comments: z.array(
                z.object({
                  comment_id: z.string(),
                  document_id: z.string(),
                  commenter_id: z.string(),
                  text: z.string(),
                  created_at: z.date(),
                  edited_at: z.date().nullable(),
                  is_deleted: z.boolean().nullable(),
                  user_document: z.any() /* circular reference to UserDocumentSchema */,
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          user_notifications: z.array(z.any() /* circular reference to UserNotificationSchema */),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.object({
              thread_id: z.string(),
              primary_participant: z.string(),
              secondary_participant: z.string().nullable(),
              created_on: z.date(),
              closed_on: z.date().nullable(),
              is_flagged: z.boolean().nullable(),
              flagged_reason: z.string().nullable(),
              participant_one: z.any() /* circular reference to UserProfileSchema */,
              participant_two: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              messages: z.array(
                z.object({
                  message_id: z.string(),
                  thread_id: z.string(),
                  sender_id: z.string(),
                  content: z.string(),
                  sent_at: z.date(),
                  updated_at: z.date().nullable(),
                  is_archived: z.boolean().nullable(),
                  discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                  sender: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      }),
    }),
  ),
  aggregateNotificationReference: z.any(),
  groupByNotificationReference: z.array(z.any()),
  findUniqueNotificationReference: z
    .object({
      notification_reference_id: z.string(),
      notification_id: z.string(),
      referenced_entity_id: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      archived: z.boolean().nullable(),
      notification: z.object({
        notification_id: z.string(),
        recipient_profile_id: z.string(),
        sent_timestamp: z.date(),
        read_timestamp: z.date().nullable(),
        message: z.string(),
        notification_refs: z.array(z.any() /* circular reference to NotificationReferenceSchema */),
        user_profile: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(
            z.object({
              document_id: z.string(),
              owner_profile_id: z.string(),
              title: z.string(),
              content: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              created_at: z.date(),
              updated_at: z.date().nullable(),
              archived: z.boolean().nullable(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
              comments: z.array(
                z.object({
                  comment_id: z.string(),
                  document_id: z.string(),
                  commenter_id: z.string(),
                  text: z.string(),
                  created_at: z.date(),
                  edited_at: z.date().nullable(),
                  is_deleted: z.boolean().nullable(),
                  user_document: z.any() /* circular reference to UserDocumentSchema */,
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          user_notifications: z.array(z.any() /* circular reference to UserNotificationSchema */),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.object({
              thread_id: z.string(),
              primary_participant: z.string(),
              secondary_participant: z.string().nullable(),
              created_on: z.date(),
              closed_on: z.date().nullable(),
              is_flagged: z.boolean().nullable(),
              flagged_reason: z.string().nullable(),
              participant_one: z.any() /* circular reference to UserProfileSchema */,
              participant_two: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              messages: z.array(
                z.object({
                  message_id: z.string(),
                  thread_id: z.string(),
                  sender_id: z.string(),
                  content: z.string(),
                  sent_at: z.date(),
                  updated_at: z.date().nullable(),
                  is_archived: z.boolean().nullable(),
                  discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                  sender: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      }),
    })
    .nullable(),
  findUniqueNotificationReferenceOrThrow: z
    .object({
      notification_reference_id: z.string(),
      notification_id: z.string(),
      referenced_entity_id: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      archived: z.boolean().nullable(),
      notification: z.object({
        notification_id: z.string(),
        recipient_profile_id: z.string(),
        sent_timestamp: z.date(),
        read_timestamp: z.date().nullable(),
        message: z.string(),
        notification_refs: z.array(z.any() /* circular reference to NotificationReferenceSchema */),
        user_profile: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(
            z.object({
              document_id: z.string(),
              owner_profile_id: z.string(),
              title: z.string(),
              content: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              created_at: z.date(),
              updated_at: z.date().nullable(),
              archived: z.boolean().nullable(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
              comments: z.array(
                z.object({
                  comment_id: z.string(),
                  document_id: z.string(),
                  commenter_id: z.string(),
                  text: z.string(),
                  created_at: z.date(),
                  edited_at: z.date().nullable(),
                  is_deleted: z.boolean().nullable(),
                  user_document: z.any() /* circular reference to UserDocumentSchema */,
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          user_notifications: z.array(z.any() /* circular reference to UserNotificationSchema */),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.object({
              thread_id: z.string(),
              primary_participant: z.string(),
              secondary_participant: z.string().nullable(),
              created_on: z.date(),
              closed_on: z.date().nullable(),
              is_flagged: z.boolean().nullable(),
              flagged_reason: z.string().nullable(),
              participant_one: z.any() /* circular reference to UserProfileSchema */,
              participant_two: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              messages: z.array(
                z.object({
                  message_id: z.string(),
                  thread_id: z.string(),
                  sender_id: z.string(),
                  content: z.string(),
                  sent_at: z.date(),
                  updated_at: z.date().nullable(),
                  is_archived: z.boolean().nullable(),
                  discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                  sender: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
      }),
    })
    .nullable(),
  findFirstUserDocument: z
    .object({
      document_id: z.string(),
      owner_profile_id: z.string(),
      title: z.string(),
      content: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      created_at: z.date(),
      updated_at: z.date().nullable(),
      archived: z.boolean().nullable(),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(z.any() /* circular reference to UserDocumentSchema */),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(
          z.object({
            comment_id: z.string(),
            document_id: z.string(),
            commenter_id: z.string(),
            text: z.string(),
            created_at: z.date(),
            edited_at: z.date().nullable(),
            is_deleted: z.boolean().nullable(),
            user_document: z.any() /* circular reference to UserDocumentSchema */,
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
      comments: z.array(z.any() /* circular reference to UserCommentSchema */),
    })
    .nullable(),
  findFirstUserDocumentOrThrow: z
    .object({
      document_id: z.string(),
      owner_profile_id: z.string(),
      title: z.string(),
      content: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      created_at: z.date(),
      updated_at: z.date().nullable(),
      archived: z.boolean().nullable(),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(z.any() /* circular reference to UserDocumentSchema */),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(
          z.object({
            comment_id: z.string(),
            document_id: z.string(),
            commenter_id: z.string(),
            text: z.string(),
            created_at: z.date(),
            edited_at: z.date().nullable(),
            is_deleted: z.boolean().nullable(),
            user_document: z.any() /* circular reference to UserDocumentSchema */,
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
      comments: z.array(z.any() /* circular reference to UserCommentSchema */),
    })
    .nullable(),
  findManyUserDocument: z.array(
    z.object({
      document_id: z.string(),
      owner_profile_id: z.string(),
      title: z.string(),
      content: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      created_at: z.date(),
      updated_at: z.date().nullable(),
      archived: z.boolean().nullable(),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(z.any() /* circular reference to UserDocumentSchema */),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(
          z.object({
            comment_id: z.string(),
            document_id: z.string(),
            commenter_id: z.string(),
            text: z.string(),
            created_at: z.date(),
            edited_at: z.date().nullable(),
            is_deleted: z.boolean().nullable(),
            user_document: z.any() /* circular reference to UserDocumentSchema */,
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
      comments: z.array(z.any() /* circular reference to UserCommentSchema */),
    }),
  ),
  aggregateUserDocument: z.any(),
  groupByUserDocument: z.array(z.any()),
  findUniqueUserDocument: z
    .object({
      document_id: z.string(),
      owner_profile_id: z.string(),
      title: z.string(),
      content: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      created_at: z.date(),
      updated_at: z.date().nullable(),
      archived: z.boolean().nullable(),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(z.any() /* circular reference to UserDocumentSchema */),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(
          z.object({
            comment_id: z.string(),
            document_id: z.string(),
            commenter_id: z.string(),
            text: z.string(),
            created_at: z.date(),
            edited_at: z.date().nullable(),
            is_deleted: z.boolean().nullable(),
            user_document: z.any() /* circular reference to UserDocumentSchema */,
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
      comments: z.array(z.any() /* circular reference to UserCommentSchema */),
    })
    .nullable(),
  findUniqueUserDocumentOrThrow: z
    .object({
      document_id: z.string(),
      owner_profile_id: z.string(),
      title: z.string(),
      content: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      created_at: z.date(),
      updated_at: z.date().nullable(),
      archived: z.boolean().nullable(),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(z.any() /* circular reference to UserDocumentSchema */),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(
          z.object({
            comment_id: z.string(),
            document_id: z.string(),
            commenter_id: z.string(),
            text: z.string(),
            created_at: z.date(),
            edited_at: z.date().nullable(),
            is_deleted: z.boolean().nullable(),
            user_document: z.any() /* circular reference to UserDocumentSchema */,
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
      comments: z.array(z.any() /* circular reference to UserCommentSchema */),
    })
    .nullable(),
  findFirstUserComment: z
    .object({
      comment_id: z.string(),
      document_id: z.string(),
      commenter_id: z.string(),
      text: z.string(),
      created_at: z.date(),
      edited_at: z.date().nullable(),
      is_deleted: z.boolean().nullable(),
      user_document: z.object({
        document_id: z.string(),
        owner_profile_id: z.string(),
        title: z.string(),
        content: z.string(),
        status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
        created_at: z.date(),
        updated_at: z.date().nullable(),
        archived: z.boolean().nullable(),
        user_profile: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(z.any() /* circular reference to UserDocumentSchema */),
          user_notifications: z.array(
            z.object({
              notification_id: z.string(),
              recipient_profile_id: z.string(),
              sent_timestamp: z.date(),
              read_timestamp: z.date().nullable(),
              message: z.string(),
              notification_refs: z.array(
                z.object({
                  notification_reference_id: z.string(),
                  notification_id: z.string(),
                  referenced_entity_id: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  archived: z.boolean().nullable(),
                  notification: z.any() /* circular reference to UserNotificationSchema */,
                }),
              ),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.object({
              thread_id: z.string(),
              primary_participant: z.string(),
              secondary_participant: z.string().nullable(),
              created_on: z.date(),
              closed_on: z.date().nullable(),
              is_flagged: z.boolean().nullable(),
              flagged_reason: z.string().nullable(),
              participant_one: z.any() /* circular reference to UserProfileSchema */,
              participant_two: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              messages: z.array(
                z.object({
                  message_id: z.string(),
                  thread_id: z.string(),
                  sender_id: z.string(),
                  content: z.string(),
                  sent_at: z.date(),
                  updated_at: z.date().nullable(),
                  is_archived: z.boolean().nullable(),
                  discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                  sender: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
        comments: z.array(z.any() /* circular reference to UserCommentSchema */),
      }),
      user_profile: z.any() /* circular reference to UserProfileSchema */,
    })
    .nullable(),
  findFirstUserCommentOrThrow: z
    .object({
      comment_id: z.string(),
      document_id: z.string(),
      commenter_id: z.string(),
      text: z.string(),
      created_at: z.date(),
      edited_at: z.date().nullable(),
      is_deleted: z.boolean().nullable(),
      user_document: z.object({
        document_id: z.string(),
        owner_profile_id: z.string(),
        title: z.string(),
        content: z.string(),
        status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
        created_at: z.date(),
        updated_at: z.date().nullable(),
        archived: z.boolean().nullable(),
        user_profile: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(z.any() /* circular reference to UserDocumentSchema */),
          user_notifications: z.array(
            z.object({
              notification_id: z.string(),
              recipient_profile_id: z.string(),
              sent_timestamp: z.date(),
              read_timestamp: z.date().nullable(),
              message: z.string(),
              notification_refs: z.array(
                z.object({
                  notification_reference_id: z.string(),
                  notification_id: z.string(),
                  referenced_entity_id: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  archived: z.boolean().nullable(),
                  notification: z.any() /* circular reference to UserNotificationSchema */,
                }),
              ),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.object({
              thread_id: z.string(),
              primary_participant: z.string(),
              secondary_participant: z.string().nullable(),
              created_on: z.date(),
              closed_on: z.date().nullable(),
              is_flagged: z.boolean().nullable(),
              flagged_reason: z.string().nullable(),
              participant_one: z.any() /* circular reference to UserProfileSchema */,
              participant_two: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              messages: z.array(
                z.object({
                  message_id: z.string(),
                  thread_id: z.string(),
                  sender_id: z.string(),
                  content: z.string(),
                  sent_at: z.date(),
                  updated_at: z.date().nullable(),
                  is_archived: z.boolean().nullable(),
                  discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                  sender: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
        comments: z.array(z.any() /* circular reference to UserCommentSchema */),
      }),
      user_profile: z.any() /* circular reference to UserProfileSchema */,
    })
    .nullable(),
  findManyUserComment: z.array(
    z.object({
      comment_id: z.string(),
      document_id: z.string(),
      commenter_id: z.string(),
      text: z.string(),
      created_at: z.date(),
      edited_at: z.date().nullable(),
      is_deleted: z.boolean().nullable(),
      user_document: z.object({
        document_id: z.string(),
        owner_profile_id: z.string(),
        title: z.string(),
        content: z.string(),
        status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
        created_at: z.date(),
        updated_at: z.date().nullable(),
        archived: z.boolean().nullable(),
        user_profile: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(z.any() /* circular reference to UserDocumentSchema */),
          user_notifications: z.array(
            z.object({
              notification_id: z.string(),
              recipient_profile_id: z.string(),
              sent_timestamp: z.date(),
              read_timestamp: z.date().nullable(),
              message: z.string(),
              notification_refs: z.array(
                z.object({
                  notification_reference_id: z.string(),
                  notification_id: z.string(),
                  referenced_entity_id: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  archived: z.boolean().nullable(),
                  notification: z.any() /* circular reference to UserNotificationSchema */,
                }),
              ),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.object({
              thread_id: z.string(),
              primary_participant: z.string(),
              secondary_participant: z.string().nullable(),
              created_on: z.date(),
              closed_on: z.date().nullable(),
              is_flagged: z.boolean().nullable(),
              flagged_reason: z.string().nullable(),
              participant_one: z.any() /* circular reference to UserProfileSchema */,
              participant_two: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              messages: z.array(
                z.object({
                  message_id: z.string(),
                  thread_id: z.string(),
                  sender_id: z.string(),
                  content: z.string(),
                  sent_at: z.date(),
                  updated_at: z.date().nullable(),
                  is_archived: z.boolean().nullable(),
                  discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                  sender: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
        comments: z.array(z.any() /* circular reference to UserCommentSchema */),
      }),
      user_profile: z.any() /* circular reference to UserProfileSchema */,
    }),
  ),
  aggregateUserComment: z.any(),
  groupByUserComment: z.array(z.any()),
  findUniqueUserComment: z
    .object({
      comment_id: z.string(),
      document_id: z.string(),
      commenter_id: z.string(),
      text: z.string(),
      created_at: z.date(),
      edited_at: z.date().nullable(),
      is_deleted: z.boolean().nullable(),
      user_document: z.object({
        document_id: z.string(),
        owner_profile_id: z.string(),
        title: z.string(),
        content: z.string(),
        status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
        created_at: z.date(),
        updated_at: z.date().nullable(),
        archived: z.boolean().nullable(),
        user_profile: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(z.any() /* circular reference to UserDocumentSchema */),
          user_notifications: z.array(
            z.object({
              notification_id: z.string(),
              recipient_profile_id: z.string(),
              sent_timestamp: z.date(),
              read_timestamp: z.date().nullable(),
              message: z.string(),
              notification_refs: z.array(
                z.object({
                  notification_reference_id: z.string(),
                  notification_id: z.string(),
                  referenced_entity_id: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  archived: z.boolean().nullable(),
                  notification: z.any() /* circular reference to UserNotificationSchema */,
                }),
              ),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.object({
              thread_id: z.string(),
              primary_participant: z.string(),
              secondary_participant: z.string().nullable(),
              created_on: z.date(),
              closed_on: z.date().nullable(),
              is_flagged: z.boolean().nullable(),
              flagged_reason: z.string().nullable(),
              participant_one: z.any() /* circular reference to UserProfileSchema */,
              participant_two: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              messages: z.array(
                z.object({
                  message_id: z.string(),
                  thread_id: z.string(),
                  sender_id: z.string(),
                  content: z.string(),
                  sent_at: z.date(),
                  updated_at: z.date().nullable(),
                  is_archived: z.boolean().nullable(),
                  discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                  sender: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
        comments: z.array(z.any() /* circular reference to UserCommentSchema */),
      }),
      user_profile: z.any() /* circular reference to UserProfileSchema */,
    })
    .nullable(),
  findUniqueUserCommentOrThrow: z
    .object({
      comment_id: z.string(),
      document_id: z.string(),
      commenter_id: z.string(),
      text: z.string(),
      created_at: z.date(),
      edited_at: z.date().nullable(),
      is_deleted: z.boolean().nullable(),
      user_document: z.object({
        document_id: z.string(),
        owner_profile_id: z.string(),
        title: z.string(),
        content: z.string(),
        status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
        created_at: z.date(),
        updated_at: z.date().nullable(),
        archived: z.boolean().nullable(),
        user_profile: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(z.any() /* circular reference to UserDocumentSchema */),
          user_notifications: z.array(
            z.object({
              notification_id: z.string(),
              recipient_profile_id: z.string(),
              sent_timestamp: z.date(),
              read_timestamp: z.date().nullable(),
              message: z.string(),
              notification_refs: z.array(
                z.object({
                  notification_reference_id: z.string(),
                  notification_id: z.string(),
                  referenced_entity_id: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  archived: z.boolean().nullable(),
                  notification: z.any() /* circular reference to UserNotificationSchema */,
                }),
              ),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.object({
              thread_id: z.string(),
              primary_participant: z.string(),
              secondary_participant: z.string().nullable(),
              created_on: z.date(),
              closed_on: z.date().nullable(),
              is_flagged: z.boolean().nullable(),
              flagged_reason: z.string().nullable(),
              participant_one: z.any() /* circular reference to UserProfileSchema */,
              participant_two: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              messages: z.array(
                z.object({
                  message_id: z.string(),
                  thread_id: z.string(),
                  sender_id: z.string(),
                  content: z.string(),
                  sent_at: z.date(),
                  updated_at: z.date().nullable(),
                  is_archived: z.boolean().nullable(),
                  discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                  sender: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
        comments: z.array(z.any() /* circular reference to UserCommentSchema */),
      }),
      user_profile: z.any() /* circular reference to UserProfileSchema */,
    })
    .nullable(),
  findFirstDiscussionThread: z
    .object({
      thread_id: z.string(),
      primary_participant: z.string(),
      secondary_participant: z.string().nullable(),
      created_on: z.date(),
      closed_on: z.date().nullable(),
      is_flagged: z.boolean().nullable(),
      flagged_reason: z.string().nullable(),
      participant_one: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(
          z.object({
            message_id: z.string(),
            thread_id: z.string(),
            sender_id: z.string(),
            content: z.string(),
            sent_at: z.date(),
            updated_at: z.date().nullable(),
            is_archived: z.boolean().nullable(),
            discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
            sender: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
      participant_two: z
        .any() /* circular reference to UserProfileSchema */
        .nullable(),
      messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
    })
    .nullable(),
  findFirstDiscussionThreadOrThrow: z
    .object({
      thread_id: z.string(),
      primary_participant: z.string(),
      secondary_participant: z.string().nullable(),
      created_on: z.date(),
      closed_on: z.date().nullable(),
      is_flagged: z.boolean().nullable(),
      flagged_reason: z.string().nullable(),
      participant_one: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(
          z.object({
            message_id: z.string(),
            thread_id: z.string(),
            sender_id: z.string(),
            content: z.string(),
            sent_at: z.date(),
            updated_at: z.date().nullable(),
            is_archived: z.boolean().nullable(),
            discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
            sender: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
      participant_two: z
        .any() /* circular reference to UserProfileSchema */
        .nullable(),
      messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
    })
    .nullable(),
  findManyDiscussionThread: z.array(
    z.object({
      thread_id: z.string(),
      primary_participant: z.string(),
      secondary_participant: z.string().nullable(),
      created_on: z.date(),
      closed_on: z.date().nullable(),
      is_flagged: z.boolean().nullable(),
      flagged_reason: z.string().nullable(),
      participant_one: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(
          z.object({
            message_id: z.string(),
            thread_id: z.string(),
            sender_id: z.string(),
            content: z.string(),
            sent_at: z.date(),
            updated_at: z.date().nullable(),
            is_archived: z.boolean().nullable(),
            discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
            sender: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
      participant_two: z
        .any() /* circular reference to UserProfileSchema */
        .nullable(),
      messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
    }),
  ),
  aggregateDiscussionThread: z.any(),
  groupByDiscussionThread: z.array(z.any()),
  findUniqueDiscussionThread: z
    .object({
      thread_id: z.string(),
      primary_participant: z.string(),
      secondary_participant: z.string().nullable(),
      created_on: z.date(),
      closed_on: z.date().nullable(),
      is_flagged: z.boolean().nullable(),
      flagged_reason: z.string().nullable(),
      participant_one: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(
          z.object({
            message_id: z.string(),
            thread_id: z.string(),
            sender_id: z.string(),
            content: z.string(),
            sent_at: z.date(),
            updated_at: z.date().nullable(),
            is_archived: z.boolean().nullable(),
            discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
            sender: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
      participant_two: z
        .any() /* circular reference to UserProfileSchema */
        .nullable(),
      messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
    })
    .nullable(),
  findUniqueDiscussionThreadOrThrow: z
    .object({
      thread_id: z.string(),
      primary_participant: z.string(),
      secondary_participant: z.string().nullable(),
      created_on: z.date(),
      closed_on: z.date().nullable(),
      is_flagged: z.boolean().nullable(),
      flagged_reason: z.string().nullable(),
      participant_one: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(
          z.object({
            message_id: z.string(),
            thread_id: z.string(),
            sender_id: z.string(),
            content: z.string(),
            sent_at: z.date(),
            updated_at: z.date().nullable(),
            is_archived: z.boolean().nullable(),
            discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
            sender: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
      participant_two: z
        .any() /* circular reference to UserProfileSchema */
        .nullable(),
      messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
    })
    .nullable(),
  findFirstThreadMessage: z
    .object({
      message_id: z.string(),
      thread_id: z.string(),
      sender_id: z.string(),
      content: z.string(),
      sent_at: z.date(),
      updated_at: z.date().nullable(),
      is_archived: z.boolean().nullable(),
      discussion_thread: z.object({
        thread_id: z.string(),
        primary_participant: z.string(),
        secondary_participant: z.string().nullable(),
        created_on: z.date(),
        closed_on: z.date().nullable(),
        is_flagged: z.boolean().nullable(),
        flagged_reason: z.string().nullable(),
        participant_one: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(
            z.object({
              document_id: z.string(),
              owner_profile_id: z.string(),
              title: z.string(),
              content: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              created_at: z.date(),
              updated_at: z.date().nullable(),
              archived: z.boolean().nullable(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
              comments: z.array(
                z.object({
                  comment_id: z.string(),
                  document_id: z.string(),
                  commenter_id: z.string(),
                  text: z.string(),
                  created_at: z.date(),
                  edited_at: z.date().nullable(),
                  is_deleted: z.boolean().nullable(),
                  user_document: z.any() /* circular reference to UserDocumentSchema */,
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          user_notifications: z.array(
            z.object({
              notification_id: z.string(),
              recipient_profile_id: z.string(),
              sent_timestamp: z.date(),
              read_timestamp: z.date().nullable(),
              message: z.string(),
              notification_refs: z.array(
                z.object({
                  notification_reference_id: z.string(),
                  notification_id: z.string(),
                  referenced_entity_id: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  archived: z.boolean().nullable(),
                  notification: z.any() /* circular reference to UserNotificationSchema */,
                }),
              ),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
        participant_two: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
      }),
      sender: z.any() /* circular reference to UserProfileSchema */,
    })
    .nullable(),
  findFirstThreadMessageOrThrow: z
    .object({
      message_id: z.string(),
      thread_id: z.string(),
      sender_id: z.string(),
      content: z.string(),
      sent_at: z.date(),
      updated_at: z.date().nullable(),
      is_archived: z.boolean().nullable(),
      discussion_thread: z.object({
        thread_id: z.string(),
        primary_participant: z.string(),
        secondary_participant: z.string().nullable(),
        created_on: z.date(),
        closed_on: z.date().nullable(),
        is_flagged: z.boolean().nullable(),
        flagged_reason: z.string().nullable(),
        participant_one: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(
            z.object({
              document_id: z.string(),
              owner_profile_id: z.string(),
              title: z.string(),
              content: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              created_at: z.date(),
              updated_at: z.date().nullable(),
              archived: z.boolean().nullable(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
              comments: z.array(
                z.object({
                  comment_id: z.string(),
                  document_id: z.string(),
                  commenter_id: z.string(),
                  text: z.string(),
                  created_at: z.date(),
                  edited_at: z.date().nullable(),
                  is_deleted: z.boolean().nullable(),
                  user_document: z.any() /* circular reference to UserDocumentSchema */,
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          user_notifications: z.array(
            z.object({
              notification_id: z.string(),
              recipient_profile_id: z.string(),
              sent_timestamp: z.date(),
              read_timestamp: z.date().nullable(),
              message: z.string(),
              notification_refs: z.array(
                z.object({
                  notification_reference_id: z.string(),
                  notification_id: z.string(),
                  referenced_entity_id: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  archived: z.boolean().nullable(),
                  notification: z.any() /* circular reference to UserNotificationSchema */,
                }),
              ),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
        participant_two: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
      }),
      sender: z.any() /* circular reference to UserProfileSchema */,
    })
    .nullable(),
  findManyThreadMessage: z.array(
    z.object({
      message_id: z.string(),
      thread_id: z.string(),
      sender_id: z.string(),
      content: z.string(),
      sent_at: z.date(),
      updated_at: z.date().nullable(),
      is_archived: z.boolean().nullable(),
      discussion_thread: z.object({
        thread_id: z.string(),
        primary_participant: z.string(),
        secondary_participant: z.string().nullable(),
        created_on: z.date(),
        closed_on: z.date().nullable(),
        is_flagged: z.boolean().nullable(),
        flagged_reason: z.string().nullable(),
        participant_one: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(
            z.object({
              document_id: z.string(),
              owner_profile_id: z.string(),
              title: z.string(),
              content: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              created_at: z.date(),
              updated_at: z.date().nullable(),
              archived: z.boolean().nullable(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
              comments: z.array(
                z.object({
                  comment_id: z.string(),
                  document_id: z.string(),
                  commenter_id: z.string(),
                  text: z.string(),
                  created_at: z.date(),
                  edited_at: z.date().nullable(),
                  is_deleted: z.boolean().nullable(),
                  user_document: z.any() /* circular reference to UserDocumentSchema */,
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          user_notifications: z.array(
            z.object({
              notification_id: z.string(),
              recipient_profile_id: z.string(),
              sent_timestamp: z.date(),
              read_timestamp: z.date().nullable(),
              message: z.string(),
              notification_refs: z.array(
                z.object({
                  notification_reference_id: z.string(),
                  notification_id: z.string(),
                  referenced_entity_id: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  archived: z.boolean().nullable(),
                  notification: z.any() /* circular reference to UserNotificationSchema */,
                }),
              ),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
        participant_two: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
      }),
      sender: z.any() /* circular reference to UserProfileSchema */,
    }),
  ),
  aggregateThreadMessage: z.any(),
  groupByThreadMessage: z.array(z.any()),
  findUniqueThreadMessage: z
    .object({
      message_id: z.string(),
      thread_id: z.string(),
      sender_id: z.string(),
      content: z.string(),
      sent_at: z.date(),
      updated_at: z.date().nullable(),
      is_archived: z.boolean().nullable(),
      discussion_thread: z.object({
        thread_id: z.string(),
        primary_participant: z.string(),
        secondary_participant: z.string().nullable(),
        created_on: z.date(),
        closed_on: z.date().nullable(),
        is_flagged: z.boolean().nullable(),
        flagged_reason: z.string().nullable(),
        participant_one: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(
            z.object({
              document_id: z.string(),
              owner_profile_id: z.string(),
              title: z.string(),
              content: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              created_at: z.date(),
              updated_at: z.date().nullable(),
              archived: z.boolean().nullable(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
              comments: z.array(
                z.object({
                  comment_id: z.string(),
                  document_id: z.string(),
                  commenter_id: z.string(),
                  text: z.string(),
                  created_at: z.date(),
                  edited_at: z.date().nullable(),
                  is_deleted: z.boolean().nullable(),
                  user_document: z.any() /* circular reference to UserDocumentSchema */,
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          user_notifications: z.array(
            z.object({
              notification_id: z.string(),
              recipient_profile_id: z.string(),
              sent_timestamp: z.date(),
              read_timestamp: z.date().nullable(),
              message: z.string(),
              notification_refs: z.array(
                z.object({
                  notification_reference_id: z.string(),
                  notification_id: z.string(),
                  referenced_entity_id: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  archived: z.boolean().nullable(),
                  notification: z.any() /* circular reference to UserNotificationSchema */,
                }),
              ),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
        participant_two: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
      }),
      sender: z.any() /* circular reference to UserProfileSchema */,
    })
    .nullable(),
  findUniqueThreadMessageOrThrow: z
    .object({
      message_id: z.string(),
      thread_id: z.string(),
      sender_id: z.string(),
      content: z.string(),
      sent_at: z.date(),
      updated_at: z.date().nullable(),
      is_archived: z.boolean().nullable(),
      discussion_thread: z.object({
        thread_id: z.string(),
        primary_participant: z.string(),
        secondary_participant: z.string().nullable(),
        created_on: z.date(),
        closed_on: z.date().nullable(),
        is_flagged: z.boolean().nullable(),
        flagged_reason: z.string().nullable(),
        participant_one: z.object({
          profile_id: z.string(),
          created_timestamp: z.date(),
          updated_timestamp: z.date().nullable(),
          deactivated: z.boolean().nullable(),
          full_name: z.string(),
          email_address: z.string().nullable(),
          phone_number: z.string().nullable(),
          password_hash: z.string().nullable(),
          account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
          user_documents: z.array(
            z.object({
              document_id: z.string(),
              owner_profile_id: z.string(),
              title: z.string(),
              content: z.string(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              created_at: z.date(),
              updated_at: z.date().nullable(),
              archived: z.boolean().nullable(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
              comments: z.array(
                z.object({
                  comment_id: z.string(),
                  document_id: z.string(),
                  commenter_id: z.string(),
                  text: z.string(),
                  created_at: z.date(),
                  edited_at: z.date().nullable(),
                  is_deleted: z.boolean().nullable(),
                  user_document: z.any() /* circular reference to UserDocumentSchema */,
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          ),
          user_notifications: z.array(
            z.object({
              notification_id: z.string(),
              recipient_profile_id: z.string(),
              sent_timestamp: z.date(),
              read_timestamp: z.date().nullable(),
              message: z.string(),
              notification_refs: z.array(
                z.object({
                  notification_reference_id: z.string(),
                  notification_id: z.string(),
                  referenced_entity_id: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  archived: z.boolean().nullable(),
                  notification: z.any() /* circular reference to UserNotificationSchema */,
                }),
              ),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_accounts: z.array(
            z.object({
              account_id: z.string(),
              owner_profile_id: z.string(),
              name: z.string(),
              created_at: z.date(),
              modified_at: z.date().nullable(),
              is_active: z.boolean(),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_two_step_codes: z.array(
            z.object({
              verification_id: z.string(),
              profile_id: z.string(),
              code: z.string().nullable(),
              is_verified: z.boolean(),
              created_at: z.date(),
              verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
          created_by_profile: z
            .any() /* circular reference to UserProfileSchema */
            .nullable(),
          created_by_id: z.string().nullable(),
          profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
          threads_as_primary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          threads_as_secondary_participant: z.array(
            z.any() /* circular reference to DiscussionThreadSchema */,
          ),
          sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
          org_memberships: z.array(
            z.object({
              membership_id: z.string(),
              organization_id: z.string(),
              profile_id: z.string(),
              joined_on: z.date(),
              is_active: z.boolean().nullable(),
              organization: z.object({
                organization_id: z.string(),
                name: z.string(),
                description: z.string().nullable(),
                created_on: z.date(),
                updated_on: z.date().nullable(),
                is_active: z.boolean().nullable(),
                events: z.array(
                  z.object({
                    org_event_id: z.string(),
                    organization_id: z.string(),
                    event_name: z.string(),
                    start_time: z.date(),
                    end_time: z.date().nullable(),
                    location: z.string().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
                members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
                records: z.array(
                  z.object({
                    record_id: z.string(),
                    organization_id: z.string(),
                    title: z.string(),
                    details: z.string().nullable(),
                    created_on: z.date(),
                    updated_on: z.date().nullable(),
                    organization: z.any() /* circular reference to OrganizationSchema */,
                  }),
                ),
              }),
              user_profile: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
          payments: z.array(
            z.object({
              payment_id: z.string(),
              payer_id: z.string(),
              amount: z.any(),
              paid_at: z.date(),
              status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
              reference_note: z.string().nullable(),
              payer: z.any() /* circular reference to UserProfileSchema */,
            }),
          ),
        }),
        participant_two: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
      }),
      sender: z.any() /* circular reference to UserProfileSchema */,
    })
    .nullable(),
  findFirstTwoStepVerification: z
    .object({
      verification_id: z.string(),
      profile_id: z.string(),
      code: z.string().nullable(),
      is_verified: z.boolean(),
      created_at: z.date(),
      verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(z.any() /* circular reference to TwoStepVerificationSchema */),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findFirstTwoStepVerificationOrThrow: z
    .object({
      verification_id: z.string(),
      profile_id: z.string(),
      code: z.string().nullable(),
      is_verified: z.boolean(),
      created_at: z.date(),
      verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(z.any() /* circular reference to TwoStepVerificationSchema */),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findManyTwoStepVerification: z.array(
    z.object({
      verification_id: z.string(),
      profile_id: z.string(),
      code: z.string().nullable(),
      is_verified: z.boolean(),
      created_at: z.date(),
      verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(z.any() /* circular reference to TwoStepVerificationSchema */),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    }),
  ),
  aggregateTwoStepVerification: z.any(),
  groupByTwoStepVerification: z.array(z.any()),
  findUniqueTwoStepVerification: z
    .object({
      verification_id: z.string(),
      profile_id: z.string(),
      code: z.string().nullable(),
      is_verified: z.boolean(),
      created_at: z.date(),
      verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(z.any() /* circular reference to TwoStepVerificationSchema */),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findUniqueTwoStepVerificationOrThrow: z
    .object({
      verification_id: z.string(),
      profile_id: z.string(),
      code: z.string().nullable(),
      is_verified: z.boolean(),
      created_at: z.date(),
      verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(z.any() /* circular reference to TwoStepVerificationSchema */),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findFirstOrganization: z
    .object({
      organization_id: z.string(),
      name: z.string(),
      description: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      is_active: z.boolean().nullable(),
      events: z.array(
        z.object({
          org_event_id: z.string(),
          organization_id: z.string(),
          event_name: z.string(),
          start_time: z.date(),
          end_time: z.date().nullable(),
          location: z.string().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
        }),
      ),
      members: z.array(
        z.object({
          membership_id: z.string(),
          organization_id: z.string(),
          profile_id: z.string(),
          joined_on: z.date(),
          is_active: z.boolean().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
          user_profile: z.object({
            profile_id: z.string(),
            created_timestamp: z.date(),
            updated_timestamp: z.date().nullable(),
            deactivated: z.boolean().nullable(),
            full_name: z.string(),
            email_address: z.string().nullable(),
            phone_number: z.string().nullable(),
            password_hash: z.string().nullable(),
            account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
            user_documents: z.array(
              z.object({
                document_id: z.string(),
                owner_profile_id: z.string(),
                title: z.string(),
                content: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                created_at: z.date(),
                updated_at: z.date().nullable(),
                archived: z.boolean().nullable(),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
                comments: z.array(
                  z.object({
                    comment_id: z.string(),
                    document_id: z.string(),
                    commenter_id: z.string(),
                    text: z.string(),
                    created_at: z.date(),
                    edited_at: z.date().nullable(),
                    is_deleted: z.boolean().nullable(),
                    user_document: z.any() /* circular reference to UserDocumentSchema */,
                    user_profile: z.any() /* circular reference to UserProfileSchema */,
                  }),
                ),
              }),
            ),
            user_notifications: z.array(
              z.object({
                notification_id: z.string(),
                recipient_profile_id: z.string(),
                sent_timestamp: z.date(),
                read_timestamp: z.date().nullable(),
                message: z.string(),
                notification_refs: z.array(
                  z.object({
                    notification_reference_id: z.string(),
                    notification_id: z.string(),
                    referenced_entity_id: z.string(),
                    status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                    archived: z.boolean().nullable(),
                    notification: z.any() /* circular reference to UserNotificationSchema */,
                  }),
                ),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_accounts: z.array(
              z.object({
                account_id: z.string(),
                owner_profile_id: z.string(),
                name: z.string(),
                created_at: z.date(),
                modified_at: z.date().nullable(),
                is_active: z.boolean(),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_two_step_codes: z.array(
              z.object({
                verification_id: z.string(),
                profile_id: z.string(),
                code: z.string().nullable(),
                is_verified: z.boolean(),
                created_at: z.date(),
                verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
            created_by_profile: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            created_by_id: z.string().nullable(),
            profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
            threads_as_primary_participant: z.array(
              z.object({
                thread_id: z.string(),
                primary_participant: z.string(),
                secondary_participant: z.string().nullable(),
                created_on: z.date(),
                closed_on: z.date().nullable(),
                is_flagged: z.boolean().nullable(),
                flagged_reason: z.string().nullable(),
                participant_one: z.any() /* circular reference to UserProfileSchema */,
                participant_two: z
                  .any() /* circular reference to UserProfileSchema */
                  .nullable(),
                messages: z.array(
                  z.object({
                    message_id: z.string(),
                    thread_id: z.string(),
                    sender_id: z.string(),
                    content: z.string(),
                    sent_at: z.date(),
                    updated_at: z.date().nullable(),
                    is_archived: z.boolean().nullable(),
                    discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                    sender: z.any() /* circular reference to UserProfileSchema */,
                  }),
                ),
              }),
            ),
            threads_as_secondary_participant: z.array(
              z.any() /* circular reference to DiscussionThreadSchema */,
            ),
            sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
            org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
            payments: z.array(
              z.object({
                payment_id: z.string(),
                payer_id: z.string(),
                amount: z.any(),
                paid_at: z.date(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                reference_note: z.string().nullable(),
                payer: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        }),
      ),
      records: z.array(
        z.object({
          record_id: z.string(),
          organization_id: z.string(),
          title: z.string(),
          details: z.string().nullable(),
          created_on: z.date(),
          updated_on: z.date().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
        }),
      ),
    })
    .nullable(),
  findFirstOrganizationOrThrow: z
    .object({
      organization_id: z.string(),
      name: z.string(),
      description: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      is_active: z.boolean().nullable(),
      events: z.array(
        z.object({
          org_event_id: z.string(),
          organization_id: z.string(),
          event_name: z.string(),
          start_time: z.date(),
          end_time: z.date().nullable(),
          location: z.string().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
        }),
      ),
      members: z.array(
        z.object({
          membership_id: z.string(),
          organization_id: z.string(),
          profile_id: z.string(),
          joined_on: z.date(),
          is_active: z.boolean().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
          user_profile: z.object({
            profile_id: z.string(),
            created_timestamp: z.date(),
            updated_timestamp: z.date().nullable(),
            deactivated: z.boolean().nullable(),
            full_name: z.string(),
            email_address: z.string().nullable(),
            phone_number: z.string().nullable(),
            password_hash: z.string().nullable(),
            account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
            user_documents: z.array(
              z.object({
                document_id: z.string(),
                owner_profile_id: z.string(),
                title: z.string(),
                content: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                created_at: z.date(),
                updated_at: z.date().nullable(),
                archived: z.boolean().nullable(),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
                comments: z.array(
                  z.object({
                    comment_id: z.string(),
                    document_id: z.string(),
                    commenter_id: z.string(),
                    text: z.string(),
                    created_at: z.date(),
                    edited_at: z.date().nullable(),
                    is_deleted: z.boolean().nullable(),
                    user_document: z.any() /* circular reference to UserDocumentSchema */,
                    user_profile: z.any() /* circular reference to UserProfileSchema */,
                  }),
                ),
              }),
            ),
            user_notifications: z.array(
              z.object({
                notification_id: z.string(),
                recipient_profile_id: z.string(),
                sent_timestamp: z.date(),
                read_timestamp: z.date().nullable(),
                message: z.string(),
                notification_refs: z.array(
                  z.object({
                    notification_reference_id: z.string(),
                    notification_id: z.string(),
                    referenced_entity_id: z.string(),
                    status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                    archived: z.boolean().nullable(),
                    notification: z.any() /* circular reference to UserNotificationSchema */,
                  }),
                ),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_accounts: z.array(
              z.object({
                account_id: z.string(),
                owner_profile_id: z.string(),
                name: z.string(),
                created_at: z.date(),
                modified_at: z.date().nullable(),
                is_active: z.boolean(),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_two_step_codes: z.array(
              z.object({
                verification_id: z.string(),
                profile_id: z.string(),
                code: z.string().nullable(),
                is_verified: z.boolean(),
                created_at: z.date(),
                verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
            created_by_profile: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            created_by_id: z.string().nullable(),
            profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
            threads_as_primary_participant: z.array(
              z.object({
                thread_id: z.string(),
                primary_participant: z.string(),
                secondary_participant: z.string().nullable(),
                created_on: z.date(),
                closed_on: z.date().nullable(),
                is_flagged: z.boolean().nullable(),
                flagged_reason: z.string().nullable(),
                participant_one: z.any() /* circular reference to UserProfileSchema */,
                participant_two: z
                  .any() /* circular reference to UserProfileSchema */
                  .nullable(),
                messages: z.array(
                  z.object({
                    message_id: z.string(),
                    thread_id: z.string(),
                    sender_id: z.string(),
                    content: z.string(),
                    sent_at: z.date(),
                    updated_at: z.date().nullable(),
                    is_archived: z.boolean().nullable(),
                    discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                    sender: z.any() /* circular reference to UserProfileSchema */,
                  }),
                ),
              }),
            ),
            threads_as_secondary_participant: z.array(
              z.any() /* circular reference to DiscussionThreadSchema */,
            ),
            sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
            org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
            payments: z.array(
              z.object({
                payment_id: z.string(),
                payer_id: z.string(),
                amount: z.any(),
                paid_at: z.date(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                reference_note: z.string().nullable(),
                payer: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        }),
      ),
      records: z.array(
        z.object({
          record_id: z.string(),
          organization_id: z.string(),
          title: z.string(),
          details: z.string().nullable(),
          created_on: z.date(),
          updated_on: z.date().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
        }),
      ),
    })
    .nullable(),
  findManyOrganization: z.array(
    z.object({
      organization_id: z.string(),
      name: z.string(),
      description: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      is_active: z.boolean().nullable(),
      events: z.array(
        z.object({
          org_event_id: z.string(),
          organization_id: z.string(),
          event_name: z.string(),
          start_time: z.date(),
          end_time: z.date().nullable(),
          location: z.string().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
        }),
      ),
      members: z.array(
        z.object({
          membership_id: z.string(),
          organization_id: z.string(),
          profile_id: z.string(),
          joined_on: z.date(),
          is_active: z.boolean().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
          user_profile: z.object({
            profile_id: z.string(),
            created_timestamp: z.date(),
            updated_timestamp: z.date().nullable(),
            deactivated: z.boolean().nullable(),
            full_name: z.string(),
            email_address: z.string().nullable(),
            phone_number: z.string().nullable(),
            password_hash: z.string().nullable(),
            account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
            user_documents: z.array(
              z.object({
                document_id: z.string(),
                owner_profile_id: z.string(),
                title: z.string(),
                content: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                created_at: z.date(),
                updated_at: z.date().nullable(),
                archived: z.boolean().nullable(),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
                comments: z.array(
                  z.object({
                    comment_id: z.string(),
                    document_id: z.string(),
                    commenter_id: z.string(),
                    text: z.string(),
                    created_at: z.date(),
                    edited_at: z.date().nullable(),
                    is_deleted: z.boolean().nullable(),
                    user_document: z.any() /* circular reference to UserDocumentSchema */,
                    user_profile: z.any() /* circular reference to UserProfileSchema */,
                  }),
                ),
              }),
            ),
            user_notifications: z.array(
              z.object({
                notification_id: z.string(),
                recipient_profile_id: z.string(),
                sent_timestamp: z.date(),
                read_timestamp: z.date().nullable(),
                message: z.string(),
                notification_refs: z.array(
                  z.object({
                    notification_reference_id: z.string(),
                    notification_id: z.string(),
                    referenced_entity_id: z.string(),
                    status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                    archived: z.boolean().nullable(),
                    notification: z.any() /* circular reference to UserNotificationSchema */,
                  }),
                ),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_accounts: z.array(
              z.object({
                account_id: z.string(),
                owner_profile_id: z.string(),
                name: z.string(),
                created_at: z.date(),
                modified_at: z.date().nullable(),
                is_active: z.boolean(),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_two_step_codes: z.array(
              z.object({
                verification_id: z.string(),
                profile_id: z.string(),
                code: z.string().nullable(),
                is_verified: z.boolean(),
                created_at: z.date(),
                verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
            created_by_profile: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            created_by_id: z.string().nullable(),
            profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
            threads_as_primary_participant: z.array(
              z.object({
                thread_id: z.string(),
                primary_participant: z.string(),
                secondary_participant: z.string().nullable(),
                created_on: z.date(),
                closed_on: z.date().nullable(),
                is_flagged: z.boolean().nullable(),
                flagged_reason: z.string().nullable(),
                participant_one: z.any() /* circular reference to UserProfileSchema */,
                participant_two: z
                  .any() /* circular reference to UserProfileSchema */
                  .nullable(),
                messages: z.array(
                  z.object({
                    message_id: z.string(),
                    thread_id: z.string(),
                    sender_id: z.string(),
                    content: z.string(),
                    sent_at: z.date(),
                    updated_at: z.date().nullable(),
                    is_archived: z.boolean().nullable(),
                    discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                    sender: z.any() /* circular reference to UserProfileSchema */,
                  }),
                ),
              }),
            ),
            threads_as_secondary_participant: z.array(
              z.any() /* circular reference to DiscussionThreadSchema */,
            ),
            sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
            org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
            payments: z.array(
              z.object({
                payment_id: z.string(),
                payer_id: z.string(),
                amount: z.any(),
                paid_at: z.date(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                reference_note: z.string().nullable(),
                payer: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        }),
      ),
      records: z.array(
        z.object({
          record_id: z.string(),
          organization_id: z.string(),
          title: z.string(),
          details: z.string().nullable(),
          created_on: z.date(),
          updated_on: z.date().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
        }),
      ),
    }),
  ),
  aggregateOrganization: z.any(),
  groupByOrganization: z.array(z.any()),
  findUniqueOrganization: z
    .object({
      organization_id: z.string(),
      name: z.string(),
      description: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      is_active: z.boolean().nullable(),
      events: z.array(
        z.object({
          org_event_id: z.string(),
          organization_id: z.string(),
          event_name: z.string(),
          start_time: z.date(),
          end_time: z.date().nullable(),
          location: z.string().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
        }),
      ),
      members: z.array(
        z.object({
          membership_id: z.string(),
          organization_id: z.string(),
          profile_id: z.string(),
          joined_on: z.date(),
          is_active: z.boolean().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
          user_profile: z.object({
            profile_id: z.string(),
            created_timestamp: z.date(),
            updated_timestamp: z.date().nullable(),
            deactivated: z.boolean().nullable(),
            full_name: z.string(),
            email_address: z.string().nullable(),
            phone_number: z.string().nullable(),
            password_hash: z.string().nullable(),
            account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
            user_documents: z.array(
              z.object({
                document_id: z.string(),
                owner_profile_id: z.string(),
                title: z.string(),
                content: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                created_at: z.date(),
                updated_at: z.date().nullable(),
                archived: z.boolean().nullable(),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
                comments: z.array(
                  z.object({
                    comment_id: z.string(),
                    document_id: z.string(),
                    commenter_id: z.string(),
                    text: z.string(),
                    created_at: z.date(),
                    edited_at: z.date().nullable(),
                    is_deleted: z.boolean().nullable(),
                    user_document: z.any() /* circular reference to UserDocumentSchema */,
                    user_profile: z.any() /* circular reference to UserProfileSchema */,
                  }),
                ),
              }),
            ),
            user_notifications: z.array(
              z.object({
                notification_id: z.string(),
                recipient_profile_id: z.string(),
                sent_timestamp: z.date(),
                read_timestamp: z.date().nullable(),
                message: z.string(),
                notification_refs: z.array(
                  z.object({
                    notification_reference_id: z.string(),
                    notification_id: z.string(),
                    referenced_entity_id: z.string(),
                    status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                    archived: z.boolean().nullable(),
                    notification: z.any() /* circular reference to UserNotificationSchema */,
                  }),
                ),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_accounts: z.array(
              z.object({
                account_id: z.string(),
                owner_profile_id: z.string(),
                name: z.string(),
                created_at: z.date(),
                modified_at: z.date().nullable(),
                is_active: z.boolean(),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_two_step_codes: z.array(
              z.object({
                verification_id: z.string(),
                profile_id: z.string(),
                code: z.string().nullable(),
                is_verified: z.boolean(),
                created_at: z.date(),
                verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
            created_by_profile: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            created_by_id: z.string().nullable(),
            profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
            threads_as_primary_participant: z.array(
              z.object({
                thread_id: z.string(),
                primary_participant: z.string(),
                secondary_participant: z.string().nullable(),
                created_on: z.date(),
                closed_on: z.date().nullable(),
                is_flagged: z.boolean().nullable(),
                flagged_reason: z.string().nullable(),
                participant_one: z.any() /* circular reference to UserProfileSchema */,
                participant_two: z
                  .any() /* circular reference to UserProfileSchema */
                  .nullable(),
                messages: z.array(
                  z.object({
                    message_id: z.string(),
                    thread_id: z.string(),
                    sender_id: z.string(),
                    content: z.string(),
                    sent_at: z.date(),
                    updated_at: z.date().nullable(),
                    is_archived: z.boolean().nullable(),
                    discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                    sender: z.any() /* circular reference to UserProfileSchema */,
                  }),
                ),
              }),
            ),
            threads_as_secondary_participant: z.array(
              z.any() /* circular reference to DiscussionThreadSchema */,
            ),
            sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
            org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
            payments: z.array(
              z.object({
                payment_id: z.string(),
                payer_id: z.string(),
                amount: z.any(),
                paid_at: z.date(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                reference_note: z.string().nullable(),
                payer: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        }),
      ),
      records: z.array(
        z.object({
          record_id: z.string(),
          organization_id: z.string(),
          title: z.string(),
          details: z.string().nullable(),
          created_on: z.date(),
          updated_on: z.date().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
        }),
      ),
    })
    .nullable(),
  findUniqueOrganizationOrThrow: z
    .object({
      organization_id: z.string(),
      name: z.string(),
      description: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      is_active: z.boolean().nullable(),
      events: z.array(
        z.object({
          org_event_id: z.string(),
          organization_id: z.string(),
          event_name: z.string(),
          start_time: z.date(),
          end_time: z.date().nullable(),
          location: z.string().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
        }),
      ),
      members: z.array(
        z.object({
          membership_id: z.string(),
          organization_id: z.string(),
          profile_id: z.string(),
          joined_on: z.date(),
          is_active: z.boolean().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
          user_profile: z.object({
            profile_id: z.string(),
            created_timestamp: z.date(),
            updated_timestamp: z.date().nullable(),
            deactivated: z.boolean().nullable(),
            full_name: z.string(),
            email_address: z.string().nullable(),
            phone_number: z.string().nullable(),
            password_hash: z.string().nullable(),
            account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
            user_documents: z.array(
              z.object({
                document_id: z.string(),
                owner_profile_id: z.string(),
                title: z.string(),
                content: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                created_at: z.date(),
                updated_at: z.date().nullable(),
                archived: z.boolean().nullable(),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
                comments: z.array(
                  z.object({
                    comment_id: z.string(),
                    document_id: z.string(),
                    commenter_id: z.string(),
                    text: z.string(),
                    created_at: z.date(),
                    edited_at: z.date().nullable(),
                    is_deleted: z.boolean().nullable(),
                    user_document: z.any() /* circular reference to UserDocumentSchema */,
                    user_profile: z.any() /* circular reference to UserProfileSchema */,
                  }),
                ),
              }),
            ),
            user_notifications: z.array(
              z.object({
                notification_id: z.string(),
                recipient_profile_id: z.string(),
                sent_timestamp: z.date(),
                read_timestamp: z.date().nullable(),
                message: z.string(),
                notification_refs: z.array(
                  z.object({
                    notification_reference_id: z.string(),
                    notification_id: z.string(),
                    referenced_entity_id: z.string(),
                    status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                    archived: z.boolean().nullable(),
                    notification: z.any() /* circular reference to UserNotificationSchema */,
                  }),
                ),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_accounts: z.array(
              z.object({
                account_id: z.string(),
                owner_profile_id: z.string(),
                name: z.string(),
                created_at: z.date(),
                modified_at: z.date().nullable(),
                is_active: z.boolean(),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_two_step_codes: z.array(
              z.object({
                verification_id: z.string(),
                profile_id: z.string(),
                code: z.string().nullable(),
                is_verified: z.boolean(),
                created_at: z.date(),
                verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
            user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
            created_by_profile: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            created_by_id: z.string().nullable(),
            profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
            threads_as_primary_participant: z.array(
              z.object({
                thread_id: z.string(),
                primary_participant: z.string(),
                secondary_participant: z.string().nullable(),
                created_on: z.date(),
                closed_on: z.date().nullable(),
                is_flagged: z.boolean().nullable(),
                flagged_reason: z.string().nullable(),
                participant_one: z.any() /* circular reference to UserProfileSchema */,
                participant_two: z
                  .any() /* circular reference to UserProfileSchema */
                  .nullable(),
                messages: z.array(
                  z.object({
                    message_id: z.string(),
                    thread_id: z.string(),
                    sender_id: z.string(),
                    content: z.string(),
                    sent_at: z.date(),
                    updated_at: z.date().nullable(),
                    is_archived: z.boolean().nullable(),
                    discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                    sender: z.any() /* circular reference to UserProfileSchema */,
                  }),
                ),
              }),
            ),
            threads_as_secondary_participant: z.array(
              z.any() /* circular reference to DiscussionThreadSchema */,
            ),
            sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
            org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
            payments: z.array(
              z.object({
                payment_id: z.string(),
                payer_id: z.string(),
                amount: z.any(),
                paid_at: z.date(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                reference_note: z.string().nullable(),
                payer: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        }),
      ),
      records: z.array(
        z.object({
          record_id: z.string(),
          organization_id: z.string(),
          title: z.string(),
          details: z.string().nullable(),
          created_on: z.date(),
          updated_on: z.date().nullable(),
          organization: z.any() /* circular reference to OrganizationSchema */,
        }),
      ),
    })
    .nullable(),
  findFirstOrgEvent: z
    .object({
      org_event_id: z.string(),
      organization_id: z.string(),
      event_name: z.string(),
      start_time: z.date(),
      end_time: z.date().nullable(),
      location: z.string().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(z.any() /* circular reference to OrgEventSchema */),
        members: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
            user_profile: z.object({
              profile_id: z.string(),
              created_timestamp: z.date(),
              updated_timestamp: z.date().nullable(),
              deactivated: z.boolean().nullable(),
              full_name: z.string(),
              email_address: z.string().nullable(),
              phone_number: z.string().nullable(),
              password_hash: z.string().nullable(),
              account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
              user_documents: z.array(
                z.object({
                  document_id: z.string(),
                  owner_profile_id: z.string(),
                  title: z.string(),
                  content: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  created_at: z.date(),
                  updated_at: z.date().nullable(),
                  archived: z.boolean().nullable(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                  comments: z.array(
                    z.object({
                      comment_id: z.string(),
                      document_id: z.string(),
                      commenter_id: z.string(),
                      text: z.string(),
                      created_at: z.date(),
                      edited_at: z.date().nullable(),
                      is_deleted: z.boolean().nullable(),
                      user_document: z.any() /* circular reference to UserDocumentSchema */,
                      user_profile: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              user_notifications: z.array(
                z.object({
                  notification_id: z.string(),
                  recipient_profile_id: z.string(),
                  sent_timestamp: z.date(),
                  read_timestamp: z.date().nullable(),
                  message: z.string(),
                  notification_refs: z.array(
                    z.object({
                      notification_reference_id: z.string(),
                      notification_id: z.string(),
                      referenced_entity_id: z.string(),
                      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                      archived: z.boolean().nullable(),
                      notification: z.any() /* circular reference to UserNotificationSchema */,
                    }),
                  ),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_accounts: z.array(
                z.object({
                  account_id: z.string(),
                  owner_profile_id: z.string(),
                  name: z.string(),
                  created_at: z.date(),
                  modified_at: z.date().nullable(),
                  is_active: z.boolean(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_two_step_codes: z.array(
                z.object({
                  verification_id: z.string(),
                  profile_id: z.string(),
                  code: z.string().nullable(),
                  is_verified: z.boolean(),
                  created_at: z.date(),
                  verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
              created_by_profile: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              created_by_id: z.string().nullable(),
              profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
              threads_as_primary_participant: z.array(
                z.object({
                  thread_id: z.string(),
                  primary_participant: z.string(),
                  secondary_participant: z.string().nullable(),
                  created_on: z.date(),
                  closed_on: z.date().nullable(),
                  is_flagged: z.boolean().nullable(),
                  flagged_reason: z.string().nullable(),
                  participant_one: z.any() /* circular reference to UserProfileSchema */,
                  participant_two: z
                    .any() /* circular reference to UserProfileSchema */
                    .nullable(),
                  messages: z.array(
                    z.object({
                      message_id: z.string(),
                      thread_id: z.string(),
                      sender_id: z.string(),
                      content: z.string(),
                      sent_at: z.date(),
                      updated_at: z.date().nullable(),
                      is_archived: z.boolean().nullable(),
                      discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                      sender: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              threads_as_secondary_participant: z.array(
                z.any() /* circular reference to DiscussionThreadSchema */,
              ),
              sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
              org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              payments: z.array(
                z.object({
                  payment_id: z.string(),
                  payer_id: z.string(),
                  amount: z.any(),
                  paid_at: z.date(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  reference_note: z.string().nullable(),
                  payer: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          }),
        ),
        records: z.array(
          z.object({
            record_id: z.string(),
            organization_id: z.string(),
            title: z.string(),
            details: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findFirstOrgEventOrThrow: z
    .object({
      org_event_id: z.string(),
      organization_id: z.string(),
      event_name: z.string(),
      start_time: z.date(),
      end_time: z.date().nullable(),
      location: z.string().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(z.any() /* circular reference to OrgEventSchema */),
        members: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
            user_profile: z.object({
              profile_id: z.string(),
              created_timestamp: z.date(),
              updated_timestamp: z.date().nullable(),
              deactivated: z.boolean().nullable(),
              full_name: z.string(),
              email_address: z.string().nullable(),
              phone_number: z.string().nullable(),
              password_hash: z.string().nullable(),
              account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
              user_documents: z.array(
                z.object({
                  document_id: z.string(),
                  owner_profile_id: z.string(),
                  title: z.string(),
                  content: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  created_at: z.date(),
                  updated_at: z.date().nullable(),
                  archived: z.boolean().nullable(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                  comments: z.array(
                    z.object({
                      comment_id: z.string(),
                      document_id: z.string(),
                      commenter_id: z.string(),
                      text: z.string(),
                      created_at: z.date(),
                      edited_at: z.date().nullable(),
                      is_deleted: z.boolean().nullable(),
                      user_document: z.any() /* circular reference to UserDocumentSchema */,
                      user_profile: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              user_notifications: z.array(
                z.object({
                  notification_id: z.string(),
                  recipient_profile_id: z.string(),
                  sent_timestamp: z.date(),
                  read_timestamp: z.date().nullable(),
                  message: z.string(),
                  notification_refs: z.array(
                    z.object({
                      notification_reference_id: z.string(),
                      notification_id: z.string(),
                      referenced_entity_id: z.string(),
                      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                      archived: z.boolean().nullable(),
                      notification: z.any() /* circular reference to UserNotificationSchema */,
                    }),
                  ),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_accounts: z.array(
                z.object({
                  account_id: z.string(),
                  owner_profile_id: z.string(),
                  name: z.string(),
                  created_at: z.date(),
                  modified_at: z.date().nullable(),
                  is_active: z.boolean(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_two_step_codes: z.array(
                z.object({
                  verification_id: z.string(),
                  profile_id: z.string(),
                  code: z.string().nullable(),
                  is_verified: z.boolean(),
                  created_at: z.date(),
                  verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
              created_by_profile: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              created_by_id: z.string().nullable(),
              profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
              threads_as_primary_participant: z.array(
                z.object({
                  thread_id: z.string(),
                  primary_participant: z.string(),
                  secondary_participant: z.string().nullable(),
                  created_on: z.date(),
                  closed_on: z.date().nullable(),
                  is_flagged: z.boolean().nullable(),
                  flagged_reason: z.string().nullable(),
                  participant_one: z.any() /* circular reference to UserProfileSchema */,
                  participant_two: z
                    .any() /* circular reference to UserProfileSchema */
                    .nullable(),
                  messages: z.array(
                    z.object({
                      message_id: z.string(),
                      thread_id: z.string(),
                      sender_id: z.string(),
                      content: z.string(),
                      sent_at: z.date(),
                      updated_at: z.date().nullable(),
                      is_archived: z.boolean().nullable(),
                      discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                      sender: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              threads_as_secondary_participant: z.array(
                z.any() /* circular reference to DiscussionThreadSchema */,
              ),
              sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
              org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              payments: z.array(
                z.object({
                  payment_id: z.string(),
                  payer_id: z.string(),
                  amount: z.any(),
                  paid_at: z.date(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  reference_note: z.string().nullable(),
                  payer: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          }),
        ),
        records: z.array(
          z.object({
            record_id: z.string(),
            organization_id: z.string(),
            title: z.string(),
            details: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findManyOrgEvent: z.array(
    z.object({
      org_event_id: z.string(),
      organization_id: z.string(),
      event_name: z.string(),
      start_time: z.date(),
      end_time: z.date().nullable(),
      location: z.string().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(z.any() /* circular reference to OrgEventSchema */),
        members: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
            user_profile: z.object({
              profile_id: z.string(),
              created_timestamp: z.date(),
              updated_timestamp: z.date().nullable(),
              deactivated: z.boolean().nullable(),
              full_name: z.string(),
              email_address: z.string().nullable(),
              phone_number: z.string().nullable(),
              password_hash: z.string().nullable(),
              account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
              user_documents: z.array(
                z.object({
                  document_id: z.string(),
                  owner_profile_id: z.string(),
                  title: z.string(),
                  content: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  created_at: z.date(),
                  updated_at: z.date().nullable(),
                  archived: z.boolean().nullable(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                  comments: z.array(
                    z.object({
                      comment_id: z.string(),
                      document_id: z.string(),
                      commenter_id: z.string(),
                      text: z.string(),
                      created_at: z.date(),
                      edited_at: z.date().nullable(),
                      is_deleted: z.boolean().nullable(),
                      user_document: z.any() /* circular reference to UserDocumentSchema */,
                      user_profile: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              user_notifications: z.array(
                z.object({
                  notification_id: z.string(),
                  recipient_profile_id: z.string(),
                  sent_timestamp: z.date(),
                  read_timestamp: z.date().nullable(),
                  message: z.string(),
                  notification_refs: z.array(
                    z.object({
                      notification_reference_id: z.string(),
                      notification_id: z.string(),
                      referenced_entity_id: z.string(),
                      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                      archived: z.boolean().nullable(),
                      notification: z.any() /* circular reference to UserNotificationSchema */,
                    }),
                  ),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_accounts: z.array(
                z.object({
                  account_id: z.string(),
                  owner_profile_id: z.string(),
                  name: z.string(),
                  created_at: z.date(),
                  modified_at: z.date().nullable(),
                  is_active: z.boolean(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_two_step_codes: z.array(
                z.object({
                  verification_id: z.string(),
                  profile_id: z.string(),
                  code: z.string().nullable(),
                  is_verified: z.boolean(),
                  created_at: z.date(),
                  verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
              created_by_profile: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              created_by_id: z.string().nullable(),
              profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
              threads_as_primary_participant: z.array(
                z.object({
                  thread_id: z.string(),
                  primary_participant: z.string(),
                  secondary_participant: z.string().nullable(),
                  created_on: z.date(),
                  closed_on: z.date().nullable(),
                  is_flagged: z.boolean().nullable(),
                  flagged_reason: z.string().nullable(),
                  participant_one: z.any() /* circular reference to UserProfileSchema */,
                  participant_two: z
                    .any() /* circular reference to UserProfileSchema */
                    .nullable(),
                  messages: z.array(
                    z.object({
                      message_id: z.string(),
                      thread_id: z.string(),
                      sender_id: z.string(),
                      content: z.string(),
                      sent_at: z.date(),
                      updated_at: z.date().nullable(),
                      is_archived: z.boolean().nullable(),
                      discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                      sender: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              threads_as_secondary_participant: z.array(
                z.any() /* circular reference to DiscussionThreadSchema */,
              ),
              sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
              org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              payments: z.array(
                z.object({
                  payment_id: z.string(),
                  payer_id: z.string(),
                  amount: z.any(),
                  paid_at: z.date(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  reference_note: z.string().nullable(),
                  payer: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          }),
        ),
        records: z.array(
          z.object({
            record_id: z.string(),
            organization_id: z.string(),
            title: z.string(),
            details: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
      }),
    }),
  ),
  aggregateOrgEvent: z.any(),
  groupByOrgEvent: z.array(z.any()),
  findUniqueOrgEvent: z
    .object({
      org_event_id: z.string(),
      organization_id: z.string(),
      event_name: z.string(),
      start_time: z.date(),
      end_time: z.date().nullable(),
      location: z.string().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(z.any() /* circular reference to OrgEventSchema */),
        members: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
            user_profile: z.object({
              profile_id: z.string(),
              created_timestamp: z.date(),
              updated_timestamp: z.date().nullable(),
              deactivated: z.boolean().nullable(),
              full_name: z.string(),
              email_address: z.string().nullable(),
              phone_number: z.string().nullable(),
              password_hash: z.string().nullable(),
              account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
              user_documents: z.array(
                z.object({
                  document_id: z.string(),
                  owner_profile_id: z.string(),
                  title: z.string(),
                  content: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  created_at: z.date(),
                  updated_at: z.date().nullable(),
                  archived: z.boolean().nullable(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                  comments: z.array(
                    z.object({
                      comment_id: z.string(),
                      document_id: z.string(),
                      commenter_id: z.string(),
                      text: z.string(),
                      created_at: z.date(),
                      edited_at: z.date().nullable(),
                      is_deleted: z.boolean().nullable(),
                      user_document: z.any() /* circular reference to UserDocumentSchema */,
                      user_profile: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              user_notifications: z.array(
                z.object({
                  notification_id: z.string(),
                  recipient_profile_id: z.string(),
                  sent_timestamp: z.date(),
                  read_timestamp: z.date().nullable(),
                  message: z.string(),
                  notification_refs: z.array(
                    z.object({
                      notification_reference_id: z.string(),
                      notification_id: z.string(),
                      referenced_entity_id: z.string(),
                      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                      archived: z.boolean().nullable(),
                      notification: z.any() /* circular reference to UserNotificationSchema */,
                    }),
                  ),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_accounts: z.array(
                z.object({
                  account_id: z.string(),
                  owner_profile_id: z.string(),
                  name: z.string(),
                  created_at: z.date(),
                  modified_at: z.date().nullable(),
                  is_active: z.boolean(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_two_step_codes: z.array(
                z.object({
                  verification_id: z.string(),
                  profile_id: z.string(),
                  code: z.string().nullable(),
                  is_verified: z.boolean(),
                  created_at: z.date(),
                  verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
              created_by_profile: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              created_by_id: z.string().nullable(),
              profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
              threads_as_primary_participant: z.array(
                z.object({
                  thread_id: z.string(),
                  primary_participant: z.string(),
                  secondary_participant: z.string().nullable(),
                  created_on: z.date(),
                  closed_on: z.date().nullable(),
                  is_flagged: z.boolean().nullable(),
                  flagged_reason: z.string().nullable(),
                  participant_one: z.any() /* circular reference to UserProfileSchema */,
                  participant_two: z
                    .any() /* circular reference to UserProfileSchema */
                    .nullable(),
                  messages: z.array(
                    z.object({
                      message_id: z.string(),
                      thread_id: z.string(),
                      sender_id: z.string(),
                      content: z.string(),
                      sent_at: z.date(),
                      updated_at: z.date().nullable(),
                      is_archived: z.boolean().nullable(),
                      discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                      sender: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              threads_as_secondary_participant: z.array(
                z.any() /* circular reference to DiscussionThreadSchema */,
              ),
              sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
              org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              payments: z.array(
                z.object({
                  payment_id: z.string(),
                  payer_id: z.string(),
                  amount: z.any(),
                  paid_at: z.date(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  reference_note: z.string().nullable(),
                  payer: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          }),
        ),
        records: z.array(
          z.object({
            record_id: z.string(),
            organization_id: z.string(),
            title: z.string(),
            details: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findUniqueOrgEventOrThrow: z
    .object({
      org_event_id: z.string(),
      organization_id: z.string(),
      event_name: z.string(),
      start_time: z.date(),
      end_time: z.date().nullable(),
      location: z.string().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(z.any() /* circular reference to OrgEventSchema */),
        members: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
            user_profile: z.object({
              profile_id: z.string(),
              created_timestamp: z.date(),
              updated_timestamp: z.date().nullable(),
              deactivated: z.boolean().nullable(),
              full_name: z.string(),
              email_address: z.string().nullable(),
              phone_number: z.string().nullable(),
              password_hash: z.string().nullable(),
              account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
              user_documents: z.array(
                z.object({
                  document_id: z.string(),
                  owner_profile_id: z.string(),
                  title: z.string(),
                  content: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  created_at: z.date(),
                  updated_at: z.date().nullable(),
                  archived: z.boolean().nullable(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                  comments: z.array(
                    z.object({
                      comment_id: z.string(),
                      document_id: z.string(),
                      commenter_id: z.string(),
                      text: z.string(),
                      created_at: z.date(),
                      edited_at: z.date().nullable(),
                      is_deleted: z.boolean().nullable(),
                      user_document: z.any() /* circular reference to UserDocumentSchema */,
                      user_profile: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              user_notifications: z.array(
                z.object({
                  notification_id: z.string(),
                  recipient_profile_id: z.string(),
                  sent_timestamp: z.date(),
                  read_timestamp: z.date().nullable(),
                  message: z.string(),
                  notification_refs: z.array(
                    z.object({
                      notification_reference_id: z.string(),
                      notification_id: z.string(),
                      referenced_entity_id: z.string(),
                      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                      archived: z.boolean().nullable(),
                      notification: z.any() /* circular reference to UserNotificationSchema */,
                    }),
                  ),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_accounts: z.array(
                z.object({
                  account_id: z.string(),
                  owner_profile_id: z.string(),
                  name: z.string(),
                  created_at: z.date(),
                  modified_at: z.date().nullable(),
                  is_active: z.boolean(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_two_step_codes: z.array(
                z.object({
                  verification_id: z.string(),
                  profile_id: z.string(),
                  code: z.string().nullable(),
                  is_verified: z.boolean(),
                  created_at: z.date(),
                  verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
              created_by_profile: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              created_by_id: z.string().nullable(),
              profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
              threads_as_primary_participant: z.array(
                z.object({
                  thread_id: z.string(),
                  primary_participant: z.string(),
                  secondary_participant: z.string().nullable(),
                  created_on: z.date(),
                  closed_on: z.date().nullable(),
                  is_flagged: z.boolean().nullable(),
                  flagged_reason: z.string().nullable(),
                  participant_one: z.any() /* circular reference to UserProfileSchema */,
                  participant_two: z
                    .any() /* circular reference to UserProfileSchema */
                    .nullable(),
                  messages: z.array(
                    z.object({
                      message_id: z.string(),
                      thread_id: z.string(),
                      sender_id: z.string(),
                      content: z.string(),
                      sent_at: z.date(),
                      updated_at: z.date().nullable(),
                      is_archived: z.boolean().nullable(),
                      discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                      sender: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              threads_as_secondary_participant: z.array(
                z.any() /* circular reference to DiscussionThreadSchema */,
              ),
              sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
              org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              payments: z.array(
                z.object({
                  payment_id: z.string(),
                  payer_id: z.string(),
                  amount: z.any(),
                  paid_at: z.date(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  reference_note: z.string().nullable(),
                  payer: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          }),
        ),
        records: z.array(
          z.object({
            record_id: z.string(),
            organization_id: z.string(),
            title: z.string(),
            details: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findFirstOrgMembership: z
    .object({
      membership_id: z.string(),
      organization_id: z.string(),
      profile_id: z.string(),
      joined_on: z.date(),
      is_active: z.boolean().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(
          z.object({
            org_event_id: z.string(),
            organization_id: z.string(),
            event_name: z.string(),
            start_time: z.date(),
            end_time: z.date().nullable(),
            location: z.string().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
        members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
        records: z.array(
          z.object({
            record_id: z.string(),
            organization_id: z.string(),
            title: z.string(),
            details: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
      }),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findFirstOrgMembershipOrThrow: z
    .object({
      membership_id: z.string(),
      organization_id: z.string(),
      profile_id: z.string(),
      joined_on: z.date(),
      is_active: z.boolean().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(
          z.object({
            org_event_id: z.string(),
            organization_id: z.string(),
            event_name: z.string(),
            start_time: z.date(),
            end_time: z.date().nullable(),
            location: z.string().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
        members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
        records: z.array(
          z.object({
            record_id: z.string(),
            organization_id: z.string(),
            title: z.string(),
            details: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
      }),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findManyOrgMembership: z.array(
    z.object({
      membership_id: z.string(),
      organization_id: z.string(),
      profile_id: z.string(),
      joined_on: z.date(),
      is_active: z.boolean().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(
          z.object({
            org_event_id: z.string(),
            organization_id: z.string(),
            event_name: z.string(),
            start_time: z.date(),
            end_time: z.date().nullable(),
            location: z.string().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
        members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
        records: z.array(
          z.object({
            record_id: z.string(),
            organization_id: z.string(),
            title: z.string(),
            details: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
      }),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    }),
  ),
  aggregateOrgMembership: z.any(),
  groupByOrgMembership: z.array(z.any()),
  findUniqueOrgMembership: z
    .object({
      membership_id: z.string(),
      organization_id: z.string(),
      profile_id: z.string(),
      joined_on: z.date(),
      is_active: z.boolean().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(
          z.object({
            org_event_id: z.string(),
            organization_id: z.string(),
            event_name: z.string(),
            start_time: z.date(),
            end_time: z.date().nullable(),
            location: z.string().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
        members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
        records: z.array(
          z.object({
            record_id: z.string(),
            organization_id: z.string(),
            title: z.string(),
            details: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
      }),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findUniqueOrgMembershipOrThrow: z
    .object({
      membership_id: z.string(),
      organization_id: z.string(),
      profile_id: z.string(),
      joined_on: z.date(),
      is_active: z.boolean().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(
          z.object({
            org_event_id: z.string(),
            organization_id: z.string(),
            event_name: z.string(),
            start_time: z.date(),
            end_time: z.date().nullable(),
            location: z.string().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
        members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
        records: z.array(
          z.object({
            record_id: z.string(),
            organization_id: z.string(),
            title: z.string(),
            details: z.string().nullable(),
            created_on: z.date(),
            updated_on: z.date().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
      }),
      user_profile: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
        payments: z.array(
          z.object({
            payment_id: z.string(),
            payer_id: z.string(),
            amount: z.any(),
            paid_at: z.date(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            reference_note: z.string().nullable(),
            payer: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
      }),
    })
    .nullable(),
  findFirstOrgRecord: z
    .object({
      record_id: z.string(),
      organization_id: z.string(),
      title: z.string(),
      details: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(
          z.object({
            org_event_id: z.string(),
            organization_id: z.string(),
            event_name: z.string(),
            start_time: z.date(),
            end_time: z.date().nullable(),
            location: z.string().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
        members: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
            user_profile: z.object({
              profile_id: z.string(),
              created_timestamp: z.date(),
              updated_timestamp: z.date().nullable(),
              deactivated: z.boolean().nullable(),
              full_name: z.string(),
              email_address: z.string().nullable(),
              phone_number: z.string().nullable(),
              password_hash: z.string().nullable(),
              account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
              user_documents: z.array(
                z.object({
                  document_id: z.string(),
                  owner_profile_id: z.string(),
                  title: z.string(),
                  content: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  created_at: z.date(),
                  updated_at: z.date().nullable(),
                  archived: z.boolean().nullable(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                  comments: z.array(
                    z.object({
                      comment_id: z.string(),
                      document_id: z.string(),
                      commenter_id: z.string(),
                      text: z.string(),
                      created_at: z.date(),
                      edited_at: z.date().nullable(),
                      is_deleted: z.boolean().nullable(),
                      user_document: z.any() /* circular reference to UserDocumentSchema */,
                      user_profile: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              user_notifications: z.array(
                z.object({
                  notification_id: z.string(),
                  recipient_profile_id: z.string(),
                  sent_timestamp: z.date(),
                  read_timestamp: z.date().nullable(),
                  message: z.string(),
                  notification_refs: z.array(
                    z.object({
                      notification_reference_id: z.string(),
                      notification_id: z.string(),
                      referenced_entity_id: z.string(),
                      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                      archived: z.boolean().nullable(),
                      notification: z.any() /* circular reference to UserNotificationSchema */,
                    }),
                  ),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_accounts: z.array(
                z.object({
                  account_id: z.string(),
                  owner_profile_id: z.string(),
                  name: z.string(),
                  created_at: z.date(),
                  modified_at: z.date().nullable(),
                  is_active: z.boolean(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_two_step_codes: z.array(
                z.object({
                  verification_id: z.string(),
                  profile_id: z.string(),
                  code: z.string().nullable(),
                  is_verified: z.boolean(),
                  created_at: z.date(),
                  verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
              created_by_profile: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              created_by_id: z.string().nullable(),
              profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
              threads_as_primary_participant: z.array(
                z.object({
                  thread_id: z.string(),
                  primary_participant: z.string(),
                  secondary_participant: z.string().nullable(),
                  created_on: z.date(),
                  closed_on: z.date().nullable(),
                  is_flagged: z.boolean().nullable(),
                  flagged_reason: z.string().nullable(),
                  participant_one: z.any() /* circular reference to UserProfileSchema */,
                  participant_two: z
                    .any() /* circular reference to UserProfileSchema */
                    .nullable(),
                  messages: z.array(
                    z.object({
                      message_id: z.string(),
                      thread_id: z.string(),
                      sender_id: z.string(),
                      content: z.string(),
                      sent_at: z.date(),
                      updated_at: z.date().nullable(),
                      is_archived: z.boolean().nullable(),
                      discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                      sender: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              threads_as_secondary_participant: z.array(
                z.any() /* circular reference to DiscussionThreadSchema */,
              ),
              sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
              org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              payments: z.array(
                z.object({
                  payment_id: z.string(),
                  payer_id: z.string(),
                  amount: z.any(),
                  paid_at: z.date(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  reference_note: z.string().nullable(),
                  payer: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          }),
        ),
        records: z.array(z.any() /* circular reference to OrgRecordSchema */),
      }),
    })
    .nullable(),
  findFirstOrgRecordOrThrow: z
    .object({
      record_id: z.string(),
      organization_id: z.string(),
      title: z.string(),
      details: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(
          z.object({
            org_event_id: z.string(),
            organization_id: z.string(),
            event_name: z.string(),
            start_time: z.date(),
            end_time: z.date().nullable(),
            location: z.string().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
        members: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
            user_profile: z.object({
              profile_id: z.string(),
              created_timestamp: z.date(),
              updated_timestamp: z.date().nullable(),
              deactivated: z.boolean().nullable(),
              full_name: z.string(),
              email_address: z.string().nullable(),
              phone_number: z.string().nullable(),
              password_hash: z.string().nullable(),
              account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
              user_documents: z.array(
                z.object({
                  document_id: z.string(),
                  owner_profile_id: z.string(),
                  title: z.string(),
                  content: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  created_at: z.date(),
                  updated_at: z.date().nullable(),
                  archived: z.boolean().nullable(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                  comments: z.array(
                    z.object({
                      comment_id: z.string(),
                      document_id: z.string(),
                      commenter_id: z.string(),
                      text: z.string(),
                      created_at: z.date(),
                      edited_at: z.date().nullable(),
                      is_deleted: z.boolean().nullable(),
                      user_document: z.any() /* circular reference to UserDocumentSchema */,
                      user_profile: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              user_notifications: z.array(
                z.object({
                  notification_id: z.string(),
                  recipient_profile_id: z.string(),
                  sent_timestamp: z.date(),
                  read_timestamp: z.date().nullable(),
                  message: z.string(),
                  notification_refs: z.array(
                    z.object({
                      notification_reference_id: z.string(),
                      notification_id: z.string(),
                      referenced_entity_id: z.string(),
                      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                      archived: z.boolean().nullable(),
                      notification: z.any() /* circular reference to UserNotificationSchema */,
                    }),
                  ),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_accounts: z.array(
                z.object({
                  account_id: z.string(),
                  owner_profile_id: z.string(),
                  name: z.string(),
                  created_at: z.date(),
                  modified_at: z.date().nullable(),
                  is_active: z.boolean(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_two_step_codes: z.array(
                z.object({
                  verification_id: z.string(),
                  profile_id: z.string(),
                  code: z.string().nullable(),
                  is_verified: z.boolean(),
                  created_at: z.date(),
                  verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
              created_by_profile: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              created_by_id: z.string().nullable(),
              profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
              threads_as_primary_participant: z.array(
                z.object({
                  thread_id: z.string(),
                  primary_participant: z.string(),
                  secondary_participant: z.string().nullable(),
                  created_on: z.date(),
                  closed_on: z.date().nullable(),
                  is_flagged: z.boolean().nullable(),
                  flagged_reason: z.string().nullable(),
                  participant_one: z.any() /* circular reference to UserProfileSchema */,
                  participant_two: z
                    .any() /* circular reference to UserProfileSchema */
                    .nullable(),
                  messages: z.array(
                    z.object({
                      message_id: z.string(),
                      thread_id: z.string(),
                      sender_id: z.string(),
                      content: z.string(),
                      sent_at: z.date(),
                      updated_at: z.date().nullable(),
                      is_archived: z.boolean().nullable(),
                      discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                      sender: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              threads_as_secondary_participant: z.array(
                z.any() /* circular reference to DiscussionThreadSchema */,
              ),
              sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
              org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              payments: z.array(
                z.object({
                  payment_id: z.string(),
                  payer_id: z.string(),
                  amount: z.any(),
                  paid_at: z.date(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  reference_note: z.string().nullable(),
                  payer: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          }),
        ),
        records: z.array(z.any() /* circular reference to OrgRecordSchema */),
      }),
    })
    .nullable(),
  findManyOrgRecord: z.array(
    z.object({
      record_id: z.string(),
      organization_id: z.string(),
      title: z.string(),
      details: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(
          z.object({
            org_event_id: z.string(),
            organization_id: z.string(),
            event_name: z.string(),
            start_time: z.date(),
            end_time: z.date().nullable(),
            location: z.string().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
        members: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
            user_profile: z.object({
              profile_id: z.string(),
              created_timestamp: z.date(),
              updated_timestamp: z.date().nullable(),
              deactivated: z.boolean().nullable(),
              full_name: z.string(),
              email_address: z.string().nullable(),
              phone_number: z.string().nullable(),
              password_hash: z.string().nullable(),
              account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
              user_documents: z.array(
                z.object({
                  document_id: z.string(),
                  owner_profile_id: z.string(),
                  title: z.string(),
                  content: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  created_at: z.date(),
                  updated_at: z.date().nullable(),
                  archived: z.boolean().nullable(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                  comments: z.array(
                    z.object({
                      comment_id: z.string(),
                      document_id: z.string(),
                      commenter_id: z.string(),
                      text: z.string(),
                      created_at: z.date(),
                      edited_at: z.date().nullable(),
                      is_deleted: z.boolean().nullable(),
                      user_document: z.any() /* circular reference to UserDocumentSchema */,
                      user_profile: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              user_notifications: z.array(
                z.object({
                  notification_id: z.string(),
                  recipient_profile_id: z.string(),
                  sent_timestamp: z.date(),
                  read_timestamp: z.date().nullable(),
                  message: z.string(),
                  notification_refs: z.array(
                    z.object({
                      notification_reference_id: z.string(),
                      notification_id: z.string(),
                      referenced_entity_id: z.string(),
                      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                      archived: z.boolean().nullable(),
                      notification: z.any() /* circular reference to UserNotificationSchema */,
                    }),
                  ),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_accounts: z.array(
                z.object({
                  account_id: z.string(),
                  owner_profile_id: z.string(),
                  name: z.string(),
                  created_at: z.date(),
                  modified_at: z.date().nullable(),
                  is_active: z.boolean(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_two_step_codes: z.array(
                z.object({
                  verification_id: z.string(),
                  profile_id: z.string(),
                  code: z.string().nullable(),
                  is_verified: z.boolean(),
                  created_at: z.date(),
                  verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
              created_by_profile: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              created_by_id: z.string().nullable(),
              profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
              threads_as_primary_participant: z.array(
                z.object({
                  thread_id: z.string(),
                  primary_participant: z.string(),
                  secondary_participant: z.string().nullable(),
                  created_on: z.date(),
                  closed_on: z.date().nullable(),
                  is_flagged: z.boolean().nullable(),
                  flagged_reason: z.string().nullable(),
                  participant_one: z.any() /* circular reference to UserProfileSchema */,
                  participant_two: z
                    .any() /* circular reference to UserProfileSchema */
                    .nullable(),
                  messages: z.array(
                    z.object({
                      message_id: z.string(),
                      thread_id: z.string(),
                      sender_id: z.string(),
                      content: z.string(),
                      sent_at: z.date(),
                      updated_at: z.date().nullable(),
                      is_archived: z.boolean().nullable(),
                      discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                      sender: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              threads_as_secondary_participant: z.array(
                z.any() /* circular reference to DiscussionThreadSchema */,
              ),
              sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
              org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              payments: z.array(
                z.object({
                  payment_id: z.string(),
                  payer_id: z.string(),
                  amount: z.any(),
                  paid_at: z.date(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  reference_note: z.string().nullable(),
                  payer: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          }),
        ),
        records: z.array(z.any() /* circular reference to OrgRecordSchema */),
      }),
    }),
  ),
  aggregateOrgRecord: z.any(),
  groupByOrgRecord: z.array(z.any()),
  findUniqueOrgRecord: z
    .object({
      record_id: z.string(),
      organization_id: z.string(),
      title: z.string(),
      details: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(
          z.object({
            org_event_id: z.string(),
            organization_id: z.string(),
            event_name: z.string(),
            start_time: z.date(),
            end_time: z.date().nullable(),
            location: z.string().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
        members: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
            user_profile: z.object({
              profile_id: z.string(),
              created_timestamp: z.date(),
              updated_timestamp: z.date().nullable(),
              deactivated: z.boolean().nullable(),
              full_name: z.string(),
              email_address: z.string().nullable(),
              phone_number: z.string().nullable(),
              password_hash: z.string().nullable(),
              account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
              user_documents: z.array(
                z.object({
                  document_id: z.string(),
                  owner_profile_id: z.string(),
                  title: z.string(),
                  content: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  created_at: z.date(),
                  updated_at: z.date().nullable(),
                  archived: z.boolean().nullable(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                  comments: z.array(
                    z.object({
                      comment_id: z.string(),
                      document_id: z.string(),
                      commenter_id: z.string(),
                      text: z.string(),
                      created_at: z.date(),
                      edited_at: z.date().nullable(),
                      is_deleted: z.boolean().nullable(),
                      user_document: z.any() /* circular reference to UserDocumentSchema */,
                      user_profile: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              user_notifications: z.array(
                z.object({
                  notification_id: z.string(),
                  recipient_profile_id: z.string(),
                  sent_timestamp: z.date(),
                  read_timestamp: z.date().nullable(),
                  message: z.string(),
                  notification_refs: z.array(
                    z.object({
                      notification_reference_id: z.string(),
                      notification_id: z.string(),
                      referenced_entity_id: z.string(),
                      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                      archived: z.boolean().nullable(),
                      notification: z.any() /* circular reference to UserNotificationSchema */,
                    }),
                  ),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_accounts: z.array(
                z.object({
                  account_id: z.string(),
                  owner_profile_id: z.string(),
                  name: z.string(),
                  created_at: z.date(),
                  modified_at: z.date().nullable(),
                  is_active: z.boolean(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_two_step_codes: z.array(
                z.object({
                  verification_id: z.string(),
                  profile_id: z.string(),
                  code: z.string().nullable(),
                  is_verified: z.boolean(),
                  created_at: z.date(),
                  verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
              created_by_profile: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              created_by_id: z.string().nullable(),
              profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
              threads_as_primary_participant: z.array(
                z.object({
                  thread_id: z.string(),
                  primary_participant: z.string(),
                  secondary_participant: z.string().nullable(),
                  created_on: z.date(),
                  closed_on: z.date().nullable(),
                  is_flagged: z.boolean().nullable(),
                  flagged_reason: z.string().nullable(),
                  participant_one: z.any() /* circular reference to UserProfileSchema */,
                  participant_two: z
                    .any() /* circular reference to UserProfileSchema */
                    .nullable(),
                  messages: z.array(
                    z.object({
                      message_id: z.string(),
                      thread_id: z.string(),
                      sender_id: z.string(),
                      content: z.string(),
                      sent_at: z.date(),
                      updated_at: z.date().nullable(),
                      is_archived: z.boolean().nullable(),
                      discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                      sender: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              threads_as_secondary_participant: z.array(
                z.any() /* circular reference to DiscussionThreadSchema */,
              ),
              sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
              org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              payments: z.array(
                z.object({
                  payment_id: z.string(),
                  payer_id: z.string(),
                  amount: z.any(),
                  paid_at: z.date(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  reference_note: z.string().nullable(),
                  payer: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          }),
        ),
        records: z.array(z.any() /* circular reference to OrgRecordSchema */),
      }),
    })
    .nullable(),
  findUniqueOrgRecordOrThrow: z
    .object({
      record_id: z.string(),
      organization_id: z.string(),
      title: z.string(),
      details: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      organization: z.object({
        organization_id: z.string(),
        name: z.string(),
        description: z.string().nullable(),
        created_on: z.date(),
        updated_on: z.date().nullable(),
        is_active: z.boolean().nullable(),
        events: z.array(
          z.object({
            org_event_id: z.string(),
            organization_id: z.string(),
            event_name: z.string(),
            start_time: z.date(),
            end_time: z.date().nullable(),
            location: z.string().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
          }),
        ),
        members: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.any() /* circular reference to OrganizationSchema */,
            user_profile: z.object({
              profile_id: z.string(),
              created_timestamp: z.date(),
              updated_timestamp: z.date().nullable(),
              deactivated: z.boolean().nullable(),
              full_name: z.string(),
              email_address: z.string().nullable(),
              phone_number: z.string().nullable(),
              password_hash: z.string().nullable(),
              account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
              user_documents: z.array(
                z.object({
                  document_id: z.string(),
                  owner_profile_id: z.string(),
                  title: z.string(),
                  content: z.string(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  created_at: z.date(),
                  updated_at: z.date().nullable(),
                  archived: z.boolean().nullable(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                  comments: z.array(
                    z.object({
                      comment_id: z.string(),
                      document_id: z.string(),
                      commenter_id: z.string(),
                      text: z.string(),
                      created_at: z.date(),
                      edited_at: z.date().nullable(),
                      is_deleted: z.boolean().nullable(),
                      user_document: z.any() /* circular reference to UserDocumentSchema */,
                      user_profile: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              user_notifications: z.array(
                z.object({
                  notification_id: z.string(),
                  recipient_profile_id: z.string(),
                  sent_timestamp: z.date(),
                  read_timestamp: z.date().nullable(),
                  message: z.string(),
                  notification_refs: z.array(
                    z.object({
                      notification_reference_id: z.string(),
                      notification_id: z.string(),
                      referenced_entity_id: z.string(),
                      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                      archived: z.boolean().nullable(),
                      notification: z.any() /* circular reference to UserNotificationSchema */,
                    }),
                  ),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_accounts: z.array(
                z.object({
                  account_id: z.string(),
                  owner_profile_id: z.string(),
                  name: z.string(),
                  created_at: z.date(),
                  modified_at: z.date().nullable(),
                  is_active: z.boolean(),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_two_step_codes: z.array(
                z.object({
                  verification_id: z.string(),
                  profile_id: z.string(),
                  code: z.string().nullable(),
                  is_verified: z.boolean(),
                  created_at: z.date(),
                  verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
                  user_profile: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
              user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
              created_by_profile: z
                .any() /* circular reference to UserProfileSchema */
                .nullable(),
              created_by_id: z.string().nullable(),
              profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
              threads_as_primary_participant: z.array(
                z.object({
                  thread_id: z.string(),
                  primary_participant: z.string(),
                  secondary_participant: z.string().nullable(),
                  created_on: z.date(),
                  closed_on: z.date().nullable(),
                  is_flagged: z.boolean().nullable(),
                  flagged_reason: z.string().nullable(),
                  participant_one: z.any() /* circular reference to UserProfileSchema */,
                  participant_two: z
                    .any() /* circular reference to UserProfileSchema */
                    .nullable(),
                  messages: z.array(
                    z.object({
                      message_id: z.string(),
                      thread_id: z.string(),
                      sender_id: z.string(),
                      content: z.string(),
                      sent_at: z.date(),
                      updated_at: z.date().nullable(),
                      is_archived: z.boolean().nullable(),
                      discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                      sender: z.any() /* circular reference to UserProfileSchema */,
                    }),
                  ),
                }),
              ),
              threads_as_secondary_participant: z.array(
                z.any() /* circular reference to DiscussionThreadSchema */,
              ),
              sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
              org_memberships: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              payments: z.array(
                z.object({
                  payment_id: z.string(),
                  payer_id: z.string(),
                  amount: z.any(),
                  paid_at: z.date(),
                  status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                  reference_note: z.string().nullable(),
                  payer: z.any() /* circular reference to UserProfileSchema */,
                }),
              ),
            }),
          }),
        ),
        records: z.array(z.any() /* circular reference to OrgRecordSchema */),
      }),
    })
    .nullable(),
  findFirstPayment: z
    .object({
      payment_id: z.string(),
      payer_id: z.string(),
      amount: z.any(),
      paid_at: z.date(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      reference_note: z.string().nullable(),
      payer: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(z.any() /* circular reference to PaymentSchema */),
      }),
    })
    .nullable(),
  findFirstPaymentOrThrow: z
    .object({
      payment_id: z.string(),
      payer_id: z.string(),
      amount: z.any(),
      paid_at: z.date(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      reference_note: z.string().nullable(),
      payer: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(z.any() /* circular reference to PaymentSchema */),
      }),
    })
    .nullable(),
  findManyPayment: z.array(
    z.object({
      payment_id: z.string(),
      payer_id: z.string(),
      amount: z.any(),
      paid_at: z.date(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      reference_note: z.string().nullable(),
      payer: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(z.any() /* circular reference to PaymentSchema */),
      }),
    }),
  ),
  aggregatePayment: z.any(),
  groupByPayment: z.array(z.any()),
  findUniquePayment: z
    .object({
      payment_id: z.string(),
      payer_id: z.string(),
      amount: z.any(),
      paid_at: z.date(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      reference_note: z.string().nullable(),
      payer: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(z.any() /* circular reference to PaymentSchema */),
      }),
    })
    .nullable(),
  findUniquePaymentOrThrow: z
    .object({
      payment_id: z.string(),
      payer_id: z.string(),
      amount: z.any(),
      paid_at: z.date(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      reference_note: z.string().nullable(),
      payer: z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(
          z.object({
            document_id: z.string(),
            owner_profile_id: z.string(),
            title: z.string(),
            content: z.string(),
            status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
            created_at: z.date(),
            updated_at: z.date().nullable(),
            archived: z.boolean().nullable(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
            comments: z.array(
              z.object({
                comment_id: z.string(),
                document_id: z.string(),
                commenter_id: z.string(),
                text: z.string(),
                created_at: z.date(),
                edited_at: z.date().nullable(),
                is_deleted: z.boolean().nullable(),
                user_document: z.any() /* circular reference to UserDocumentSchema */,
                user_profile: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        user_notifications: z.array(
          z.object({
            notification_id: z.string(),
            recipient_profile_id: z.string(),
            sent_timestamp: z.date(),
            read_timestamp: z.date().nullable(),
            message: z.string(),
            notification_refs: z.array(
              z.object({
                notification_reference_id: z.string(),
                notification_id: z.string(),
                referenced_entity_id: z.string(),
                status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
                archived: z.boolean().nullable(),
                notification: z.any() /* circular reference to UserNotificationSchema */,
              }),
            ),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_accounts: z.array(
          z.object({
            account_id: z.string(),
            owner_profile_id: z.string(),
            name: z.string(),
            created_at: z.date(),
            modified_at: z.date().nullable(),
            is_active: z.boolean(),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_two_step_codes: z.array(
          z.object({
            verification_id: z.string(),
            profile_id: z.string(),
            code: z.string().nullable(),
            is_verified: z.boolean(),
            created_at: z.date(),
            verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        user_comments: z.array(z.any() /* circular reference to UserCommentSchema */),
        created_by_profile: z
          .any() /* circular reference to UserProfileSchema */
          .nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any() /* circular reference to UserProfileSchema */),
        threads_as_primary_participant: z.array(
          z.object({
            thread_id: z.string(),
            primary_participant: z.string(),
            secondary_participant: z.string().nullable(),
            created_on: z.date(),
            closed_on: z.date().nullable(),
            is_flagged: z.boolean().nullable(),
            flagged_reason: z.string().nullable(),
            participant_one: z.any() /* circular reference to UserProfileSchema */,
            participant_two: z
              .any() /* circular reference to UserProfileSchema */
              .nullable(),
            messages: z.array(
              z.object({
                message_id: z.string(),
                thread_id: z.string(),
                sender_id: z.string(),
                content: z.string(),
                sent_at: z.date(),
                updated_at: z.date().nullable(),
                is_archived: z.boolean().nullable(),
                discussion_thread: z.any() /* circular reference to DiscussionThreadSchema */,
                sender: z.any() /* circular reference to UserProfileSchema */,
              }),
            ),
          }),
        ),
        threads_as_secondary_participant: z.array(
          z.any() /* circular reference to DiscussionThreadSchema */,
        ),
        sent_messages: z.array(z.any() /* circular reference to ThreadMessageSchema */),
        org_memberships: z.array(
          z.object({
            membership_id: z.string(),
            organization_id: z.string(),
            profile_id: z.string(),
            joined_on: z.date(),
            is_active: z.boolean().nullable(),
            organization: z.object({
              organization_id: z.string(),
              name: z.string(),
              description: z.string().nullable(),
              created_on: z.date(),
              updated_on: z.date().nullable(),
              is_active: z.boolean().nullable(),
              events: z.array(
                z.object({
                  org_event_id: z.string(),
                  organization_id: z.string(),
                  event_name: z.string(),
                  start_time: z.date(),
                  end_time: z.date().nullable(),
                  location: z.string().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
              members: z.array(z.any() /* circular reference to OrgMembershipSchema */),
              records: z.array(
                z.object({
                  record_id: z.string(),
                  organization_id: z.string(),
                  title: z.string(),
                  details: z.string().nullable(),
                  created_on: z.date(),
                  updated_on: z.date().nullable(),
                  organization: z.any() /* circular reference to OrganizationSchema */,
                }),
              ),
            }),
            user_profile: z.any() /* circular reference to UserProfileSchema */,
          }),
        ),
        payments: z.array(z.any() /* circular reference to PaymentSchema */),
      }),
    })
    .nullable(),
});
