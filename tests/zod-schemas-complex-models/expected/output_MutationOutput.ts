// Auto-generated by prisma-dto-gen (refactored inline)

type Decimal = { valueOf(): string };

type JsonValue =
  | string
  | number
  | boolean
  | { [key: string]: Record<string, unknown> }
  | Record<string, unknown>[]
  | null;

export interface MutationOutput {
  createOneChangeLog: {
    change_log_id: string;
    applied_at: Date;
    description: string;
  };
  upsertOneChangeLog: any /* circular reference to ChangeLog */;
  createManyChangeLog: any;
  createManyChangeLogAndReturn: any;
  deleteOneChangeLog: any /* circular reference to ChangeLog */;
  updateOneChangeLog: any /* circular reference to ChangeLog */;
  updateManyChangeLog: any;
  deleteManyChangeLog: any;
  createOneUserProfile: {
    profile_id: string;
    created_timestamp: Date;
    updated_timestamp?: Date | null;
    deactivated?: boolean | null;
    full_name: string;
    email_address?: string | null;
    phone_number?: string | null;
    password_hash?: string | null;
    account_level?: "BASIC" | "PREMIUM" | "ADMIN" | null;
    user_documents: {
      document_id: string;
      owner_profile_id: string;
      title: string;
      content: string;
      status: "DRAFT" | "REVIEW" | "PUBLISHED" | "ARCHIVED";
      created_at: Date;
      updated_at?: Date | null;
      archived?: boolean | null;
      user_profile: any /* circular reference to UserProfile */;
      comments: {
        comment_id: string;
        document_id: string;
        commenter_id: string;
        text: string;
        created_at: Date;
        edited_at?: Date | null;
        is_deleted?: boolean | null;
        user_document: any /* circular reference to UserDocument */;
        user_profile: any /* circular reference to UserProfile */;
      }[];
    }[];
    user_notifications: {
      notification_id: string;
      recipient_profile_id: string;
      sent_timestamp: Date;
      read_timestamp?: Date | null;
      message: string;
      notification_refs: {
        notification_reference_id: string;
        notification_id: string;
        referenced_entity_id: string;
        status: "DRAFT" | "REVIEW" | "PUBLISHED" | "ARCHIVED";
        archived?: boolean | null;
        notification: any /* circular reference to UserNotification */;
      }[];
      user_profile: any /* circular reference to UserProfile */;
    }[];
    user_accounts: {
      account_id: string;
      owner_profile_id: string;
      name: string;
      created_at: Date;
      modified_at?: Date | null;
      is_active: boolean;
      user_profile: any /* circular reference to UserProfile */;
    }[];
    user_two_step_codes: {
      verification_id: string;
      profile_id: string;
      code?: string | null;
      is_verified: boolean;
      created_at: Date;
      verification_type: "EMAIL" | "SMS" | "PUSH";
      user_profile: any /* circular reference to UserProfile */;
    }[];
    user_comments: any /* circular reference to UserComment */[];
    created_by_profile?: any /* circular reference to UserProfile */ | null;
    created_by_id?: string | null;
    profiles_created: any /* circular reference to UserProfile */[];
    threads_as_primary_participant: {
      thread_id: string;
      primary_participant: string;
      secondary_participant?: string | null;
      created_on: Date;
      closed_on?: Date | null;
      is_flagged?: boolean | null;
      flagged_reason?: string | null;
      participant_one: any /* circular reference to UserProfile */;
      participant_two?: any /* circular reference to UserProfile */ | null;
      messages: {
        message_id: string;
        thread_id: string;
        sender_id: string;
        content: string;
        sent_at: Date;
        updated_at?: Date | null;
        is_archived?: boolean | null;
        discussion_thread: any /* circular reference to DiscussionThread */;
        sender: any /* circular reference to UserProfile */;
      }[];
    }[];
    threads_as_secondary_participant: any /* circular reference to DiscussionThread */[];
    sent_messages: any /* circular reference to ThreadMessage */[];
    org_memberships: {
      membership_id: string;
      organization_id: string;
      profile_id: string;
      joined_on: Date;
      is_active?: boolean | null;
      organization: {
        organization_id: string;
        name: string;
        description?: string | null;
        created_on: Date;
        updated_on?: Date | null;
        is_active?: boolean | null;
        events: {
          org_event_id: string;
          organization_id: string;
          event_name: string;
          start_time: Date;
          end_time?: Date | null;
          location?: string | null;
          organization: any /* circular reference to Organization */;
        }[];
        members: any /* circular reference to OrgMembership */[];
        records: {
          record_id: string;
          organization_id: string;
          title: string;
          details?: string | null;
          created_on: Date;
          updated_on?: Date | null;
          organization: any /* circular reference to Organization */;
        }[];
      };
      user_profile: any /* circular reference to UserProfile */;
    }[];
    payments: {
      payment_id: string;
      payer_id: string;
      amount: Decimal;
      paid_at: Date;
      status: "DRAFT" | "REVIEW" | "PUBLISHED" | "ARCHIVED";
      reference_note?: string | null;
      payer: any /* circular reference to UserProfile */;
    }[];
  };
  upsertOneUserProfile: any /* circular reference to UserProfile */;
  createManyUserProfile: any;
  createManyUserProfileAndReturn: any;
  deleteOneUserProfile: any /* circular reference to UserProfile */;
  updateOneUserProfile: any /* circular reference to UserProfile */;
  updateManyUserProfile: any;
  deleteManyUserProfile: any;
  createOneUserAccount: any /* circular reference to UserAccount */;
  upsertOneUserAccount: any /* circular reference to UserAccount */;
  createManyUserAccount: any;
  createManyUserAccountAndReturn: any;
  deleteOneUserAccount: any /* circular reference to UserAccount */;
  updateOneUserAccount: any /* circular reference to UserAccount */;
  updateManyUserAccount: any;
  deleteManyUserAccount: any;
  createOneUserNotification: any /* circular reference to UserNotification */;
  upsertOneUserNotification: any /* circular reference to UserNotification */;
  createManyUserNotification: any;
  createManyUserNotificationAndReturn: any;
  deleteOneUserNotification: any /* circular reference to UserNotification */;
  updateOneUserNotification: any /* circular reference to UserNotification */;
  updateManyUserNotification: any;
  deleteManyUserNotification: any;
  createOneNotificationReference: any /* circular reference to NotificationReference */;
  upsertOneNotificationReference: any /* circular reference to NotificationReference */;
  createManyNotificationReference: any;
  createManyNotificationReferenceAndReturn: any;
  deleteOneNotificationReference: any /* circular reference to NotificationReference */;
  updateOneNotificationReference: any /* circular reference to NotificationReference */;
  updateManyNotificationReference: any;
  deleteManyNotificationReference: any;
  createOneUserDocument: any /* circular reference to UserDocument */;
  upsertOneUserDocument: any /* circular reference to UserDocument */;
  createManyUserDocument: any;
  createManyUserDocumentAndReturn: any;
  deleteOneUserDocument: any /* circular reference to UserDocument */;
  updateOneUserDocument: any /* circular reference to UserDocument */;
  updateManyUserDocument: any;
  deleteManyUserDocument: any;
  createOneUserComment: any /* circular reference to UserComment */;
  upsertOneUserComment: any /* circular reference to UserComment */;
  createManyUserComment: any;
  createManyUserCommentAndReturn: any;
  deleteOneUserComment: any /* circular reference to UserComment */;
  updateOneUserComment: any /* circular reference to UserComment */;
  updateManyUserComment: any;
  deleteManyUserComment: any;
  createOneDiscussionThread: any /* circular reference to DiscussionThread */;
  upsertOneDiscussionThread: any /* circular reference to DiscussionThread */;
  createManyDiscussionThread: any;
  createManyDiscussionThreadAndReturn: any;
  deleteOneDiscussionThread: any /* circular reference to DiscussionThread */;
  updateOneDiscussionThread: any /* circular reference to DiscussionThread */;
  updateManyDiscussionThread: any;
  deleteManyDiscussionThread: any;
  createOneThreadMessage: any /* circular reference to ThreadMessage */;
  upsertOneThreadMessage: any /* circular reference to ThreadMessage */;
  createManyThreadMessage: any;
  createManyThreadMessageAndReturn: any;
  deleteOneThreadMessage: any /* circular reference to ThreadMessage */;
  updateOneThreadMessage: any /* circular reference to ThreadMessage */;
  updateManyThreadMessage: any;
  deleteManyThreadMessage: any;
  createOneTwoStepVerification: any /* circular reference to TwoStepVerification */;
  upsertOneTwoStepVerification: any /* circular reference to TwoStepVerification */;
  createManyTwoStepVerification: any;
  createManyTwoStepVerificationAndReturn: any;
  deleteOneTwoStepVerification: any /* circular reference to TwoStepVerification */;
  updateOneTwoStepVerification: any /* circular reference to TwoStepVerification */;
  updateManyTwoStepVerification: any;
  deleteManyTwoStepVerification: any;
  createOneOrganization: any /* circular reference to Organization */;
  upsertOneOrganization: any /* circular reference to Organization */;
  createManyOrganization: any;
  createManyOrganizationAndReturn: any;
  deleteOneOrganization: any /* circular reference to Organization */;
  updateOneOrganization: any /* circular reference to Organization */;
  updateManyOrganization: any;
  deleteManyOrganization: any;
  createOneOrgEvent: any /* circular reference to OrgEvent */;
  upsertOneOrgEvent: any /* circular reference to OrgEvent */;
  createManyOrgEvent: any;
  createManyOrgEventAndReturn: any;
  deleteOneOrgEvent: any /* circular reference to OrgEvent */;
  updateOneOrgEvent: any /* circular reference to OrgEvent */;
  updateManyOrgEvent: any;
  deleteManyOrgEvent: any;
  createOneOrgMembership: any /* circular reference to OrgMembership */;
  upsertOneOrgMembership: any /* circular reference to OrgMembership */;
  createManyOrgMembership: any;
  createManyOrgMembershipAndReturn: any;
  deleteOneOrgMembership: any /* circular reference to OrgMembership */;
  updateOneOrgMembership: any /* circular reference to OrgMembership */;
  updateManyOrgMembership: any;
  deleteManyOrgMembership: any;
  createOneOrgRecord: any /* circular reference to OrgRecord */;
  upsertOneOrgRecord: any /* circular reference to OrgRecord */;
  createManyOrgRecord: any;
  createManyOrgRecordAndReturn: any;
  deleteOneOrgRecord: any /* circular reference to OrgRecord */;
  updateOneOrgRecord: any /* circular reference to OrgRecord */;
  updateManyOrgRecord: any;
  deleteManyOrgRecord: any;
  createOnePayment: any /* circular reference to Payment */;
  upsertOnePayment: any /* circular reference to Payment */;
  createManyPayment: any;
  createManyPaymentAndReturn: any;
  deleteOnePayment: any /* circular reference to Payment */;
  updateOnePayment: any /* circular reference to Payment */;
  updateManyPayment: any;
  deleteManyPayment: any;
  executeRaw: JsonValue;
  queryRaw: JsonValue;
}

import { z } from "zod";

export const MutationOutputSchema = z.object({
  createOneChangeLog: z.object({
    change_log_id: z.string(),
    applied_at: z.date(),
    description: z.string(),
  }),
  upsertOneChangeLog: z.object({
    change_log_id: z.string(),
    applied_at: z.date(),
    description: z.string(),
  }),
  createManyChangeLog: z.any(),
  createManyChangeLogAndReturn: z.array(z.any()),
  deleteOneChangeLog: z
    .object({
      change_log_id: z.string(),
      applied_at: z.date(),
      description: z.string(),
    })
    .nullable(),
  updateOneChangeLog: z
    .object({
      change_log_id: z.string(),
      applied_at: z.date(),
      description: z.string(),
    })
    .nullable(),
  updateManyChangeLog: z.any(),
  deleteManyChangeLog: z.any(),
  createOneUserProfile: z.object({
    profile_id: z.string(),
    created_timestamp: z.date(),
    updated_timestamp: z.date().nullable(),
    deactivated: z.boolean().nullable(),
    full_name: z.string(),
    email_address: z.string().nullable(),
    phone_number: z.string().nullable(),
    password_hash: z.string().nullable(),
    account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
    user_documents: z.array(z.any()),
    user_notifications: z.array(z.any()),
    user_accounts: z.array(z.any()),
    user_two_step_codes: z.array(z.any()),
    user_comments: z.array(z.any()),
    created_by_profile: z.any().nullable(),
    created_by_id: z.string().nullable(),
    profiles_created: z.array(z.any()),
    threads_as_primary_participant: z.array(z.any()),
    threads_as_secondary_participant: z.array(z.any()),
    sent_messages: z.array(z.any()),
    org_memberships: z.array(z.any()),
    payments: z.array(z.any()),
  }),
  upsertOneUserProfile: z.object({
    profile_id: z.string(),
    created_timestamp: z.date(),
    updated_timestamp: z.date().nullable(),
    deactivated: z.boolean().nullable(),
    full_name: z.string(),
    email_address: z.string().nullable(),
    phone_number: z.string().nullable(),
    password_hash: z.string().nullable(),
    account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
    user_documents: z.array(z.any()),
    user_notifications: z.array(z.any()),
    user_accounts: z.array(z.any()),
    user_two_step_codes: z.array(z.any()),
    user_comments: z.array(z.any()),
    created_by_profile: z.any().nullable(),
    created_by_id: z.string().nullable(),
    profiles_created: z.array(z.any()),
    threads_as_primary_participant: z.array(z.any()),
    threads_as_secondary_participant: z.array(z.any()),
    sent_messages: z.array(z.any()),
    org_memberships: z.array(z.any()),
    payments: z.array(z.any()),
  }),
  createManyUserProfile: z.any(),
  createManyUserProfileAndReturn: z.array(z.any()),
  deleteOneUserProfile: z
    .object({
      profile_id: z.string(),
      created_timestamp: z.date(),
      updated_timestamp: z.date().nullable(),
      deactivated: z.boolean().nullable(),
      full_name: z.string(),
      email_address: z.string().nullable(),
      phone_number: z.string().nullable(),
      password_hash: z.string().nullable(),
      account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
      user_documents: z.array(z.any()),
      user_notifications: z.array(z.any()),
      user_accounts: z.array(z.any()),
      user_two_step_codes: z.array(z.any()),
      user_comments: z.array(z.any()),
      created_by_profile: z.any().nullable(),
      created_by_id: z.string().nullable(),
      profiles_created: z.array(z.any()),
      threads_as_primary_participant: z.array(z.any()),
      threads_as_secondary_participant: z.array(z.any()),
      sent_messages: z.array(z.any()),
      org_memberships: z.array(z.any()),
      payments: z.array(z.any()),
    })
    .nullable(),
  updateOneUserProfile: z
    .object({
      profile_id: z.string(),
      created_timestamp: z.date(),
      updated_timestamp: z.date().nullable(),
      deactivated: z.boolean().nullable(),
      full_name: z.string(),
      email_address: z.string().nullable(),
      phone_number: z.string().nullable(),
      password_hash: z.string().nullable(),
      account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
      user_documents: z.array(z.any()),
      user_notifications: z.array(z.any()),
      user_accounts: z.array(z.any()),
      user_two_step_codes: z.array(z.any()),
      user_comments: z.array(z.any()),
      created_by_profile: z.any().nullable(),
      created_by_id: z.string().nullable(),
      profiles_created: z.array(z.any()),
      threads_as_primary_participant: z.array(z.any()),
      threads_as_secondary_participant: z.array(z.any()),
      sent_messages: z.array(z.any()),
      org_memberships: z.array(z.any()),
      payments: z.array(z.any()),
    })
    .nullable(),
  updateManyUserProfile: z.any(),
  deleteManyUserProfile: z.any(),
  createOneUserAccount: z.object({
    account_id: z.string(),
    owner_profile_id: z.string(),
    name: z.string(),
    created_at: z.date(),
    modified_at: z.date().nullable(),
    is_active: z.boolean(),
    user_profile: z.any(),
  }),
  upsertOneUserAccount: z.object({
    account_id: z.string(),
    owner_profile_id: z.string(),
    name: z.string(),
    created_at: z.date(),
    modified_at: z.date().nullable(),
    is_active: z.boolean(),
    user_profile: z.any(),
  }),
  createManyUserAccount: z.any(),
  createManyUserAccountAndReturn: z.array(z.any()),
  deleteOneUserAccount: z
    .object({
      account_id: z.string(),
      owner_profile_id: z.string(),
      name: z.string(),
      created_at: z.date(),
      modified_at: z.date().nullable(),
      is_active: z.boolean(),
      user_profile: z.any(),
    })
    .nullable(),
  updateOneUserAccount: z
    .object({
      account_id: z.string(),
      owner_profile_id: z.string(),
      name: z.string(),
      created_at: z.date(),
      modified_at: z.date().nullable(),
      is_active: z.boolean(),
      user_profile: z.any(),
    })
    .nullable(),
  updateManyUserAccount: z.any(),
  deleteManyUserAccount: z.any(),
  createOneUserNotification: z.object({
    notification_id: z.string(),
    recipient_profile_id: z.string(),
    sent_timestamp: z.date(),
    read_timestamp: z.date().nullable(),
    message: z.string(),
    notification_refs: z.array(z.any()),
    user_profile: z.any(),
  }),
  upsertOneUserNotification: z.object({
    notification_id: z.string(),
    recipient_profile_id: z.string(),
    sent_timestamp: z.date(),
    read_timestamp: z.date().nullable(),
    message: z.string(),
    notification_refs: z.array(z.any()),
    user_profile: z.any(),
  }),
  createManyUserNotification: z.any(),
  createManyUserNotificationAndReturn: z.array(z.any()),
  deleteOneUserNotification: z
    .object({
      notification_id: z.string(),
      recipient_profile_id: z.string(),
      sent_timestamp: z.date(),
      read_timestamp: z.date().nullable(),
      message: z.string(),
      notification_refs: z.array(z.any()),
      user_profile: z.any(),
    })
    .nullable(),
  updateOneUserNotification: z
    .object({
      notification_id: z.string(),
      recipient_profile_id: z.string(),
      sent_timestamp: z.date(),
      read_timestamp: z.date().nullable(),
      message: z.string(),
      notification_refs: z.array(z.any()),
      user_profile: z.any(),
    })
    .nullable(),
  updateManyUserNotification: z.any(),
  deleteManyUserNotification: z.any(),
  createOneNotificationReference: z.object({
    notification_reference_id: z.string(),
    notification_id: z.string(),
    referenced_entity_id: z.string(),
    status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
    archived: z.boolean().nullable(),
    notification: z.any(),
  }),
  upsertOneNotificationReference: z.object({
    notification_reference_id: z.string(),
    notification_id: z.string(),
    referenced_entity_id: z.string(),
    status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
    archived: z.boolean().nullable(),
    notification: z.any(),
  }),
  createManyNotificationReference: z.any(),
  createManyNotificationReferenceAndReturn: z.array(z.any()),
  deleteOneNotificationReference: z
    .object({
      notification_reference_id: z.string(),
      notification_id: z.string(),
      referenced_entity_id: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      archived: z.boolean().nullable(),
      notification: z.any(),
    })
    .nullable(),
  updateOneNotificationReference: z
    .object({
      notification_reference_id: z.string(),
      notification_id: z.string(),
      referenced_entity_id: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      archived: z.boolean().nullable(),
      notification: z.any(),
    })
    .nullable(),
  updateManyNotificationReference: z.any(),
  deleteManyNotificationReference: z.any(),
  createOneUserDocument: z.object({
    document_id: z.string(),
    owner_profile_id: z.string(),
    title: z.string(),
    content: z.string(),
    status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
    created_at: z.date(),
    updated_at: z.date().nullable(),
    archived: z.boolean().nullable(),
    user_profile: z.any(),
    comments: z.array(z.any()),
  }),
  upsertOneUserDocument: z.object({
    document_id: z.string(),
    owner_profile_id: z.string(),
    title: z.string(),
    content: z.string(),
    status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
    created_at: z.date(),
    updated_at: z.date().nullable(),
    archived: z.boolean().nullable(),
    user_profile: z.any(),
    comments: z.array(z.any()),
  }),
  createManyUserDocument: z.any(),
  createManyUserDocumentAndReturn: z.array(z.any()),
  deleteOneUserDocument: z
    .object({
      document_id: z.string(),
      owner_profile_id: z.string(),
      title: z.string(),
      content: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      created_at: z.date(),
      updated_at: z.date().nullable(),
      archived: z.boolean().nullable(),
      user_profile: z.any(),
      comments: z.array(z.any()),
    })
    .nullable(),
  updateOneUserDocument: z
    .object({
      document_id: z.string(),
      owner_profile_id: z.string(),
      title: z.string(),
      content: z.string(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      created_at: z.date(),
      updated_at: z.date().nullable(),
      archived: z.boolean().nullable(),
      user_profile: z.any(),
      comments: z.array(z.any()),
    })
    .nullable(),
  updateManyUserDocument: z.any(),
  deleteManyUserDocument: z.any(),
  createOneUserComment: z.object({
    comment_id: z.string(),
    document_id: z.string(),
    commenter_id: z.string(),
    text: z.string(),
    created_at: z.date(),
    edited_at: z.date().nullable(),
    is_deleted: z.boolean().nullable(),
    user_document: z.any(),
    user_profile: z.any(),
  }),
  upsertOneUserComment: z.object({
    comment_id: z.string(),
    document_id: z.string(),
    commenter_id: z.string(),
    text: z.string(),
    created_at: z.date(),
    edited_at: z.date().nullable(),
    is_deleted: z.boolean().nullable(),
    user_document: z.any(),
    user_profile: z.any(),
  }),
  createManyUserComment: z.any(),
  createManyUserCommentAndReturn: z.array(z.any()),
  deleteOneUserComment: z
    .object({
      comment_id: z.string(),
      document_id: z.string(),
      commenter_id: z.string(),
      text: z.string(),
      created_at: z.date(),
      edited_at: z.date().nullable(),
      is_deleted: z.boolean().nullable(),
      user_document: z.any(),
      user_profile: z.any(),
    })
    .nullable(),
  updateOneUserComment: z
    .object({
      comment_id: z.string(),
      document_id: z.string(),
      commenter_id: z.string(),
      text: z.string(),
      created_at: z.date(),
      edited_at: z.date().nullable(),
      is_deleted: z.boolean().nullable(),
      user_document: z.any(),
      user_profile: z.any(),
    })
    .nullable(),
  updateManyUserComment: z.any(),
  deleteManyUserComment: z.any(),
  createOneDiscussionThread: z.object({
    thread_id: z.string(),
    primary_participant: z.string(),
    secondary_participant: z.string().nullable(),
    created_on: z.date(),
    closed_on: z.date().nullable(),
    is_flagged: z.boolean().nullable(),
    flagged_reason: z.string().nullable(),
    participant_one: z.any(),
    participant_two: z.any().nullable(),
    messages: z.array(z.any()),
  }),
  upsertOneDiscussionThread: z.object({
    thread_id: z.string(),
    primary_participant: z.string(),
    secondary_participant: z.string().nullable(),
    created_on: z.date(),
    closed_on: z.date().nullable(),
    is_flagged: z.boolean().nullable(),
    flagged_reason: z.string().nullable(),
    participant_one: z.any(),
    participant_two: z.any().nullable(),
    messages: z.array(z.any()),
  }),
  createManyDiscussionThread: z.any(),
  createManyDiscussionThreadAndReturn: z.array(z.any()),
  deleteOneDiscussionThread: z
    .object({
      thread_id: z.string(),
      primary_participant: z.string(),
      secondary_participant: z.string().nullable(),
      created_on: z.date(),
      closed_on: z.date().nullable(),
      is_flagged: z.boolean().nullable(),
      flagged_reason: z.string().nullable(),
      participant_one: z.any(),
      participant_two: z.any().nullable(),
      messages: z.array(z.any()),
    })
    .nullable(),
  updateOneDiscussionThread: z
    .object({
      thread_id: z.string(),
      primary_participant: z.string(),
      secondary_participant: z.string().nullable(),
      created_on: z.date(),
      closed_on: z.date().nullable(),
      is_flagged: z.boolean().nullable(),
      flagged_reason: z.string().nullable(),
      participant_one: z.any(),
      participant_two: z.any().nullable(),
      messages: z.array(z.any()),
    })
    .nullable(),
  updateManyDiscussionThread: z.any(),
  deleteManyDiscussionThread: z.any(),
  createOneThreadMessage: z.object({
    message_id: z.string(),
    thread_id: z.string(),
    sender_id: z.string(),
    content: z.string(),
    sent_at: z.date(),
    updated_at: z.date().nullable(),
    is_archived: z.boolean().nullable(),
    discussion_thread: z.any(),
    sender: z.any(),
  }),
  upsertOneThreadMessage: z.object({
    message_id: z.string(),
    thread_id: z.string(),
    sender_id: z.string(),
    content: z.string(),
    sent_at: z.date(),
    updated_at: z.date().nullable(),
    is_archived: z.boolean().nullable(),
    discussion_thread: z.any(),
    sender: z.any(),
  }),
  createManyThreadMessage: z.any(),
  createManyThreadMessageAndReturn: z.array(z.any()),
  deleteOneThreadMessage: z
    .object({
      message_id: z.string(),
      thread_id: z.string(),
      sender_id: z.string(),
      content: z.string(),
      sent_at: z.date(),
      updated_at: z.date().nullable(),
      is_archived: z.boolean().nullable(),
      discussion_thread: z.any(),
      sender: z.any(),
    })
    .nullable(),
  updateOneThreadMessage: z
    .object({
      message_id: z.string(),
      thread_id: z.string(),
      sender_id: z.string(),
      content: z.string(),
      sent_at: z.date(),
      updated_at: z.date().nullable(),
      is_archived: z.boolean().nullable(),
      discussion_thread: z.any(),
      sender: z.any(),
    })
    .nullable(),
  updateManyThreadMessage: z.any(),
  deleteManyThreadMessage: z.any(),
  createOneTwoStepVerification: z.object({
    verification_id: z.string(),
    profile_id: z.string(),
    code: z.string().nullable(),
    is_verified: z.boolean(),
    created_at: z.date(),
    verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
    user_profile: z.any(),
  }),
  upsertOneTwoStepVerification: z.object({
    verification_id: z.string(),
    profile_id: z.string(),
    code: z.string().nullable(),
    is_verified: z.boolean(),
    created_at: z.date(),
    verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
    user_profile: z.any(),
  }),
  createManyTwoStepVerification: z.any(),
  createManyTwoStepVerificationAndReturn: z.array(z.any()),
  deleteOneTwoStepVerification: z
    .object({
      verification_id: z.string(),
      profile_id: z.string(),
      code: z.string().nullable(),
      is_verified: z.boolean(),
      created_at: z.date(),
      verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
      user_profile: z.any(),
    })
    .nullable(),
  updateOneTwoStepVerification: z
    .object({
      verification_id: z.string(),
      profile_id: z.string(),
      code: z.string().nullable(),
      is_verified: z.boolean(),
      created_at: z.date(),
      verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
      user_profile: z.any(),
    })
    .nullable(),
  updateManyTwoStepVerification: z.any(),
  deleteManyTwoStepVerification: z.any(),
  createOneOrganization: z.object({
    organization_id: z.string(),
    name: z.string(),
    description: z.string().nullable(),
    created_on: z.date(),
    updated_on: z.date().nullable(),
    is_active: z.boolean().nullable(),
    events: z.array(z.any()),
    members: z.array(z.any()),
    records: z.array(z.any()),
  }),
  upsertOneOrganization: z.object({
    organization_id: z.string(),
    name: z.string(),
    description: z.string().nullable(),
    created_on: z.date(),
    updated_on: z.date().nullable(),
    is_active: z.boolean().nullable(),
    events: z.array(z.any()),
    members: z.array(z.any()),
    records: z.array(z.any()),
  }),
  createManyOrganization: z.any(),
  createManyOrganizationAndReturn: z.array(z.any()),
  deleteOneOrganization: z
    .object({
      organization_id: z.string(),
      name: z.string(),
      description: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      is_active: z.boolean().nullable(),
      events: z.array(z.any()),
      members: z.array(z.any()),
      records: z.array(z.any()),
    })
    .nullable(),
  updateOneOrganization: z
    .object({
      organization_id: z.string(),
      name: z.string(),
      description: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      is_active: z.boolean().nullable(),
      events: z.array(z.any()),
      members: z.array(z.any()),
      records: z.array(z.any()),
    })
    .nullable(),
  updateManyOrganization: z.any(),
  deleteManyOrganization: z.any(),
  createOneOrgEvent: z.object({
    org_event_id: z.string(),
    organization_id: z.string(),
    event_name: z.string(),
    start_time: z.date(),
    end_time: z.date().nullable(),
    location: z.string().nullable(),
    organization: z.any(),
  }),
  upsertOneOrgEvent: z.object({
    org_event_id: z.string(),
    organization_id: z.string(),
    event_name: z.string(),
    start_time: z.date(),
    end_time: z.date().nullable(),
    location: z.string().nullable(),
    organization: z.any(),
  }),
  createManyOrgEvent: z.any(),
  createManyOrgEventAndReturn: z.array(z.any()),
  deleteOneOrgEvent: z
    .object({
      org_event_id: z.string(),
      organization_id: z.string(),
      event_name: z.string(),
      start_time: z.date(),
      end_time: z.date().nullable(),
      location: z.string().nullable(),
      organization: z.any(),
    })
    .nullable(),
  updateOneOrgEvent: z
    .object({
      org_event_id: z.string(),
      organization_id: z.string(),
      event_name: z.string(),
      start_time: z.date(),
      end_time: z.date().nullable(),
      location: z.string().nullable(),
      organization: z.any(),
    })
    .nullable(),
  updateManyOrgEvent: z.any(),
  deleteManyOrgEvent: z.any(),
  createOneOrgMembership: z.object({
    membership_id: z.string(),
    organization_id: z.string(),
    profile_id: z.string(),
    joined_on: z.date(),
    is_active: z.boolean().nullable(),
    organization: z.any(),
    user_profile: z.any(),
  }),
  upsertOneOrgMembership: z.object({
    membership_id: z.string(),
    organization_id: z.string(),
    profile_id: z.string(),
    joined_on: z.date(),
    is_active: z.boolean().nullable(),
    organization: z.any(),
    user_profile: z.any(),
  }),
  createManyOrgMembership: z.any(),
  createManyOrgMembershipAndReturn: z.array(z.any()),
  deleteOneOrgMembership: z
    .object({
      membership_id: z.string(),
      organization_id: z.string(),
      profile_id: z.string(),
      joined_on: z.date(),
      is_active: z.boolean().nullable(),
      organization: z.any(),
      user_profile: z.any(),
    })
    .nullable(),
  updateOneOrgMembership: z
    .object({
      membership_id: z.string(),
      organization_id: z.string(),
      profile_id: z.string(),
      joined_on: z.date(),
      is_active: z.boolean().nullable(),
      organization: z.any(),
      user_profile: z.any(),
    })
    .nullable(),
  updateManyOrgMembership: z.any(),
  deleteManyOrgMembership: z.any(),
  createOneOrgRecord: z.object({
    record_id: z.string(),
    organization_id: z.string(),
    title: z.string(),
    details: z.string().nullable(),
    created_on: z.date(),
    updated_on: z.date().nullable(),
    organization: z.any(),
  }),
  upsertOneOrgRecord: z.object({
    record_id: z.string(),
    organization_id: z.string(),
    title: z.string(),
    details: z.string().nullable(),
    created_on: z.date(),
    updated_on: z.date().nullable(),
    organization: z.any(),
  }),
  createManyOrgRecord: z.any(),
  createManyOrgRecordAndReturn: z.array(z.any()),
  deleteOneOrgRecord: z
    .object({
      record_id: z.string(),
      organization_id: z.string(),
      title: z.string(),
      details: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      organization: z.any(),
    })
    .nullable(),
  updateOneOrgRecord: z
    .object({
      record_id: z.string(),
      organization_id: z.string(),
      title: z.string(),
      details: z.string().nullable(),
      created_on: z.date(),
      updated_on: z.date().nullable(),
      organization: z.any(),
    })
    .nullable(),
  updateManyOrgRecord: z.any(),
  deleteManyOrgRecord: z.any(),
  createOnePayment: z.object({
    payment_id: z.string(),
    payer_id: z.string(),
    amount: z.any(),
    paid_at: z.date(),
    status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
    reference_note: z.string().nullable(),
    payer: z.any(),
  }),
  upsertOnePayment: z.object({
    payment_id: z.string(),
    payer_id: z.string(),
    amount: z.any(),
    paid_at: z.date(),
    status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
    reference_note: z.string().nullable(),
    payer: z.any(),
  }),
  createManyPayment: z.any(),
  createManyPaymentAndReturn: z.array(z.any()),
  deleteOnePayment: z
    .object({
      payment_id: z.string(),
      payer_id: z.string(),
      amount: z.any(),
      paid_at: z.date(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      reference_note: z.string().nullable(),
      payer: z.any(),
    })
    .nullable(),
  updateOnePayment: z
    .object({
      payment_id: z.string(),
      payer_id: z.string(),
      amount: z.any(),
      paid_at: z.date(),
      status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
      reference_note: z.string().nullable(),
      payer: z.any(),
    })
    .nullable(),
  updateManyPayment: z.any(),
  deleteManyPayment: z.any(),
  executeRaw: z.any(),
  queryRaw: z.any(),
});
