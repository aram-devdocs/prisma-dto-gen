// Auto-generated by prisma-dto-gen (refactored inline)

type Decimal = { valueOf(): string };

export interface UserProfileOutput {
  profile_id: string;
  created_timestamp: Date;
  updated_timestamp: Date;
  deactivated: boolean;
  full_name: string;
  email_address: string;
  phone_number: string;
  password_hash: string;
  account_level: "BASIC" | "PREMIUM" | "ADMIN";
  created_by_id: string;
  user_documents: {
    document_id: string;
    owner_profile_id: string;
    title: string;
    content: string;
    status: "DRAFT" | "REVIEW" | "PUBLISHED" | "ARCHIVED";
    created_at: Date;
    updated_at?: Date | null;
    archived?: boolean | null;
    user_profile: {
      profile_id: string;
      created_timestamp: Date;
      updated_timestamp?: Date | null;
      deactivated?: boolean | null;
      full_name: string;
      email_address?: string | null;
      phone_number?: string | null;
      password_hash?: string | null;
      account_level?: "BASIC" | "PREMIUM" | "ADMIN" | null;
      user_documents: any /* circular reference to UserDocument */[];
      user_notifications: {
        notification_id: string;
        recipient_profile_id: string;
        sent_timestamp: Date;
        read_timestamp?: Date | null;
        message: string;
        notification_refs: {
          notification_reference_id: string;
          notification_id: string;
          referenced_entity_id: string;
          status: "DRAFT" | "REVIEW" | "PUBLISHED" | "ARCHIVED";
          archived?: boolean | null;
          notification: any /* circular reference to UserNotification */;
        }[];
        user_profile: any /* circular reference to UserProfile */;
      }[];
      user_accounts: {
        account_id: string;
        owner_profile_id: string;
        name: string;
        created_at: Date;
        modified_at?: Date | null;
        is_active: boolean;
        user_profile: any /* circular reference to UserProfile */;
      }[];
      user_two_step_codes: {
        verification_id: string;
        profile_id: string;
        code?: string | null;
        is_verified: boolean;
        created_at: Date;
        verification_type: "EMAIL" | "SMS" | "PUSH";
        user_profile: any /* circular reference to UserProfile */;
      }[];
      user_comments: {
        comment_id: string;
        document_id: string;
        commenter_id: string;
        text: string;
        created_at: Date;
        edited_at?: Date | null;
        is_deleted?: boolean | null;
        user_document: any /* circular reference to UserDocument */;
        user_profile: any /* circular reference to UserProfile */;
      }[];
      created_by_profile?: any /* circular reference to UserProfile */ | null;
      created_by_id?: string | null;
      profiles_created: any /* circular reference to UserProfile */[];
      threads_as_primary_participant: {
        thread_id: string;
        primary_participant: string;
        secondary_participant?: string | null;
        created_on: Date;
        closed_on?: Date | null;
        is_flagged?: boolean | null;
        flagged_reason?: string | null;
        participant_one: any /* circular reference to UserProfile */;
        participant_two?: any /* circular reference to UserProfile */ | null;
        messages: {
          message_id: string;
          thread_id: string;
          sender_id: string;
          content: string;
          sent_at: Date;
          updated_at?: Date | null;
          is_archived?: boolean | null;
          discussion_thread: any /* circular reference to DiscussionThread */;
          sender: any /* circular reference to UserProfile */;
        }[];
      }[];
      threads_as_secondary_participant: any /* circular reference to DiscussionThread */[];
      sent_messages: any /* circular reference to ThreadMessage */[];
      org_memberships: {
        membership_id: string;
        organization_id: string;
        profile_id: string;
        joined_on: Date;
        is_active?: boolean | null;
        organization: {
          organization_id: string;
          name: string;
          description?: string | null;
          created_on: Date;
          updated_on?: Date | null;
          is_active?: boolean | null;
          events: {
            org_event_id: string;
            organization_id: string;
            event_name: string;
            start_time: Date;
            end_time?: Date | null;
            location?: string | null;
            organization: any /* circular reference to Organization */;
          }[];
          members: any /* circular reference to OrgMembership */[];
          records: {
            record_id: string;
            organization_id: string;
            title: string;
            details?: string | null;
            created_on: Date;
            updated_on?: Date | null;
            organization: any /* circular reference to Organization */;
          }[];
        };
        user_profile: any /* circular reference to UserProfile */;
      }[];
      payments: {
        payment_id: string;
        payer_id: string;
        amount: Decimal;
        paid_at: Date;
        status: "DRAFT" | "REVIEW" | "PUBLISHED" | "ARCHIVED";
        reference_note?: string | null;
        payer: any /* circular reference to UserProfile */;
      }[];
    };
    comments: any /* circular reference to UserComment */[];
  };
  user_notifications: any /* circular reference to UserNotification */;
  user_accounts: any /* circular reference to UserAccount */;
  user_two_step_codes: any /* circular reference to TwoStepVerification */;
  user_comments: any /* circular reference to UserComment */;
  created_by_profile: any /* circular reference to UserProfile */;
  profiles_created: any /* circular reference to UserProfile */;
  threads_as_primary_participant: any /* circular reference to DiscussionThread */;
  threads_as_secondary_participant: any /* circular reference to DiscussionThread */;
  sent_messages: any /* circular reference to ThreadMessage */;
  org_memberships: any /* circular reference to OrgMembership */;
  payments: any /* circular reference to Payment */;
  _count: any;
}

import { z } from "zod";

export const UserProfileOutputSchema = z.object({
  profile_id: z.string(),
  created_timestamp: z.date(),
  updated_timestamp: z.date().nullable(),
  deactivated: z.boolean().nullable(),
  full_name: z.string(),
  email_address: z.string().nullable(),
  phone_number: z.string().nullable(),
  password_hash: z.string().nullable(),
  account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
  created_by_id: z.string().nullable(),
  user_documents: z
    .array(
      z.object({
        document_id: z.string(),
        owner_profile_id: z.string(),
        title: z.string(),
        content: z.string(),
        status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
        created_at: z.date(),
        updated_at: z.date().nullable(),
        archived: z.boolean().nullable(),
        user_profile: z.any(),
        comments: z.array(z.any()),
      }),
    )
    .nullable(),
  user_notifications: z
    .array(
      z.object({
        notification_id: z.string(),
        recipient_profile_id: z.string(),
        sent_timestamp: z.date(),
        read_timestamp: z.date().nullable(),
        message: z.string(),
        notification_refs: z.array(z.any()),
        user_profile: z.any(),
      }),
    )
    .nullable(),
  user_accounts: z
    .array(
      z.object({
        account_id: z.string(),
        owner_profile_id: z.string(),
        name: z.string(),
        created_at: z.date(),
        modified_at: z.date().nullable(),
        is_active: z.boolean(),
        user_profile: z.any(),
      }),
    )
    .nullable(),
  user_two_step_codes: z
    .array(
      z.object({
        verification_id: z.string(),
        profile_id: z.string(),
        code: z.string().nullable(),
        is_verified: z.boolean(),
        created_at: z.date(),
        verification_type: z.enum(["EMAIL", "SMS", "PUSH"]),
        user_profile: z.any(),
      }),
    )
    .nullable(),
  user_comments: z
    .array(
      z.object({
        comment_id: z.string(),
        document_id: z.string(),
        commenter_id: z.string(),
        text: z.string(),
        created_at: z.date(),
        edited_at: z.date().nullable(),
        is_deleted: z.boolean().nullable(),
        user_document: z.any(),
        user_profile: z.any(),
      }),
    )
    .nullable(),
  created_by_profile: z
    .object({
      profile_id: z.string(),
      created_timestamp: z.date(),
      updated_timestamp: z.date().nullable(),
      deactivated: z.boolean().nullable(),
      full_name: z.string(),
      email_address: z.string().nullable(),
      phone_number: z.string().nullable(),
      password_hash: z.string().nullable(),
      account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
      user_documents: z.array(z.any()),
      user_notifications: z.array(z.any()),
      user_accounts: z.array(z.any()),
      user_two_step_codes: z.array(z.any()),
      user_comments: z.array(z.any()),
      created_by_profile: z.any().nullable(),
      created_by_id: z.string().nullable(),
      profiles_created: z.array(z.any()),
      threads_as_primary_participant: z.array(z.any()),
      threads_as_secondary_participant: z.array(z.any()),
      sent_messages: z.array(z.any()),
      org_memberships: z.array(z.any()),
      payments: z.array(z.any()),
    })
    .nullable(),
  profiles_created: z
    .array(
      z.object({
        profile_id: z.string(),
        created_timestamp: z.date(),
        updated_timestamp: z.date().nullable(),
        deactivated: z.boolean().nullable(),
        full_name: z.string(),
        email_address: z.string().nullable(),
        phone_number: z.string().nullable(),
        password_hash: z.string().nullable(),
        account_level: z.enum(["BASIC", "PREMIUM", "ADMIN"]).nullable(),
        user_documents: z.array(z.any()),
        user_notifications: z.array(z.any()),
        user_accounts: z.array(z.any()),
        user_two_step_codes: z.array(z.any()),
        user_comments: z.array(z.any()),
        created_by_profile: z.any().nullable(),
        created_by_id: z.string().nullable(),
        profiles_created: z.array(z.any()),
        threads_as_primary_participant: z.array(z.any()),
        threads_as_secondary_participant: z.array(z.any()),
        sent_messages: z.array(z.any()),
        org_memberships: z.array(z.any()),
        payments: z.array(z.any()),
      }),
    )
    .nullable(),
  threads_as_primary_participant: z
    .array(
      z.object({
        thread_id: z.string(),
        primary_participant: z.string(),
        secondary_participant: z.string().nullable(),
        created_on: z.date(),
        closed_on: z.date().nullable(),
        is_flagged: z.boolean().nullable(),
        flagged_reason: z.string().nullable(),
        participant_one: z.any(),
        participant_two: z.any().nullable(),
        messages: z.array(z.any()),
      }),
    )
    .nullable(),
  threads_as_secondary_participant: z
    .array(
      z.object({
        thread_id: z.string(),
        primary_participant: z.string(),
        secondary_participant: z.string().nullable(),
        created_on: z.date(),
        closed_on: z.date().nullable(),
        is_flagged: z.boolean().nullable(),
        flagged_reason: z.string().nullable(),
        participant_one: z.any(),
        participant_two: z.any().nullable(),
        messages: z.array(z.any()),
      }),
    )
    .nullable(),
  sent_messages: z
    .array(
      z.object({
        message_id: z.string(),
        thread_id: z.string(),
        sender_id: z.string(),
        content: z.string(),
        sent_at: z.date(),
        updated_at: z.date().nullable(),
        is_archived: z.boolean().nullable(),
        discussion_thread: z.any(),
        sender: z.any(),
      }),
    )
    .nullable(),
  org_memberships: z
    .array(
      z.object({
        membership_id: z.string(),
        organization_id: z.string(),
        profile_id: z.string(),
        joined_on: z.date(),
        is_active: z.boolean().nullable(),
        organization: z.any(),
        user_profile: z.any(),
      }),
    )
    .nullable(),
  payments: z
    .array(
      z.object({
        payment_id: z.string(),
        payer_id: z.string(),
        amount: z.any(),
        paid_at: z.date(),
        status: z.enum(["DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"]),
        reference_note: z.string().nullable(),
        payer: z.any(),
      }),
    )
    .nullable(),
  _count: z.any(),
});
