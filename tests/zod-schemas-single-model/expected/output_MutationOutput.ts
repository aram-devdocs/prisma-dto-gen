// Auto-generated by prisma-dto-gen (refactored inline)

type JsonValue = string | number | boolean | { [key: string]: JsonValue } | JsonValue[] | null;

export interface MutationOutput {
  createOneUser: {
    id: number;
    name: string;
    email: string;
  };
  upsertOneUser: any /* circular reference to User */;
  createManyUser: any;
  createManyUserAndReturn: any;
  deleteOneUser?: any /* circular reference to User */;
  updateOneUser?: any /* circular reference to User */;
  updateManyUser: any;
  deleteManyUser: any;
  executeRaw: JsonValue;
  queryRaw: JsonValue;
}

import { z } from "zod";

export const MutationOutputSchema = z.object({
  createOneUser: z.object({
    id: z.number(),
    name: z.string(),
    email: z.string(),
  }),
  upsertOneUser: z.object({
    id: z.number(),
    name: z.string(),
    email: z.string(),
  }),
  createManyUser: z.any(),
  createManyUserAndReturn: z.array(z.any()),
  deleteOneUser: z
    .object({
      id: z.number(),
      name: z.string(),
      email: z.string(),
    })
    .optional(),
  updateOneUser: z
    .object({
      id: z.number(),
      name: z.string(),
      email: z.string(),
    })
    .optional(),
  updateManyUser: z.any(),
  deleteManyUser: z.any(),
  executeRaw: z.any(),
  queryRaw: z.any(),
});
