// Auto-generated by prisma-dto-gen (refactored inline)

export interface QueryOutput {
  findFirstUser: {
    id: number;
    name: string;
    email: string;
    age?: number | null;
    isFoo: boolean;
    password: string;
    createdAt: Date;
    updatedAt: Date;
  };
  findFirstUserOrThrow: any /* circular reference to User */;
  findManyUser: any /* circular reference to User */;
  aggregateUser: any;
  groupByUser: any;
  findUniqueUser: any /* circular reference to User */;
  findUniqueUserOrThrow: any /* circular reference to User */;
}

import { z } from "zod";

export const QueryOutputSchema = z.object({
  findFirstUser: z
    .object({
      id: z.number(),
      name: z.string().min(1).max(100),
      email: z.string().email(),
      age: z.number().int().min(0).max(120).nullable(),
      isFoo: z.boolean(),
      password: z
        .string()
        .min(8)
        .max(32)
        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,32}$/)
        .describe(
          "Password must be 8-32 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.",
        ),
      createdAt: z.date(),
      updatedAt: z.date(),
    })
    .nullable(),
  findFirstUserOrThrow: z
    .object({
      id: z.number(),
      name: z.string().min(1).max(100),
      email: z.string().email(),
      age: z.number().int().min(0).max(120).nullable(),
      isFoo: z.boolean(),
      password: z
        .string()
        .min(8)
        .max(32)
        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,32}$/)
        .describe(
          "Password must be 8-32 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.",
        ),
      createdAt: z.date(),
      updatedAt: z.date(),
    })
    .nullable(),
  findManyUser: z.array(
    z.object({
      id: z.number(),
      name: z.string().min(1).max(100),
      email: z.string().email(),
      age: z.number().int().min(0).max(120).nullable(),
      isFoo: z.boolean(),
      password: z
        .string()
        .min(8)
        .max(32)
        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,32}$/)
        .describe(
          "Password must be 8-32 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.",
        ),
      createdAt: z.date(),
      updatedAt: z.date(),
    }),
  ),
  aggregateUser: z.any(),
  groupByUser: z.array(z.any()),
  findUniqueUser: z
    .object({
      id: z.number(),
      name: z.string().min(1).max(100),
      email: z.string().email(),
      age: z.number().int().min(0).max(120).nullable(),
      isFoo: z.boolean(),
      password: z
        .string()
        .min(8)
        .max(32)
        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,32}$/)
        .describe(
          "Password must be 8-32 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.",
        ),
      createdAt: z.date(),
      updatedAt: z.date(),
    })
    .nullable(),
  findUniqueUserOrThrow: z
    .object({
      id: z.number(),
      name: z.string().min(1).max(100),
      email: z.string().email(),
      age: z.number().int().min(0).max(120).nullable(),
      isFoo: z.boolean(),
      password: z
        .string()
        .min(8)
        .max(32)
        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,32}$/)
        .describe(
          "Password must be 8-32 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.",
        ),
      createdAt: z.date(),
      updatedAt: z.date(),
    })
    .nullable(),
});
